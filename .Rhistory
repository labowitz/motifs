tiss
tiss@meta.data %>% colnames()
FeatureScatter(object = tiss, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
head(meta.data)
tiss
source("./scripts/analysis/imports.R")
# Specify pathway name (as saved in pathway_df) and get genes.
pathway_name =  'Tgf-beta family receptors'
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
# Thresholds for processing data.
min_genes_pathway = 2 # tgfb min. number of genes expressed
min_expr_threshold = 0.2 # tgfb minimum expression threshold for gene to be on
diverse_quantile = 0.9
sat_val = 0.99
seurat_obj = master_seurat
data_frame_main <- normalizedDevel(pathway_genes = pathway_genes,
sat_val = sat_val,
seurat_obj = seurat_obj,
fill_zero_rows = T
)
dim(data_frame_main)
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
optimal_k_pathway = 30
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
pipe_run$matrix %>% dim()
pipe_run$data_frame %>% dim()
quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)$data_frame
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_2C_3_4BCDE_S2ABC_S3D.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_S4A.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_S4A.R")
strsplit("hi_silh_plt_abc", "_silh_plt")
strsplit("hi_silh_plt_abc", "_silh_plt")[[1]]
strsplit("hi_silh_plt_abc", "_silh_plt")[1
]
strsplit("hi_silh_plt_abc", "_silh_plt")[[1]][1]
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_S4A.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_S4A.R")
saved_files
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_S4A.R")
dispersion_stats <- parseDispersion(pathway_list_dispersion = pathway_list_dispersion[2:length(pathway_list_dispersion)],
dispersion_dir = dispersion_dir)
# 3. Master data.frame
res = plot_dispersion_distribution(dispersion_stats,
labels_idx = c(9,10,12,13,14,1,3),
min_silh = 0.3,
min_n_cluster = 2,
df_kvals = df_kvals,
use_mean = F,
include_metabolic = F,
use_palette = 'Paired')
res[[1]] +
theme(text = element_text(size = 20)) +
ylab('N clusters / n genes') +
xlab('Dispersion')
master_df <- res[[2]] # will now include all the summary statistics for all pathways
master_df <- master_df %>% mutate(short_label = str_trunc(pathway_name, 10))
fig5_scatter(master_df = master_df, max_width = 0.35)
ggsave(paste(fig_dir, "Figure_5C.pdf", sep=""))
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_S4A_Revise.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Supplementary_File_4.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Supplementary_File_4.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Supplementary_File_4.R")
silh_res_dir
pathway_list_dispersion
pathway_list_dispersion[[1]]
fig_5_df[fig_5_df$width<0.35]
fig_5_df[fig_5_df$width<0.35,]
for (i in pathway_list_dispersion[[2]]){
if (fig_5_df$width[fig_5_df$pathway_name == i] < 0.35){
optimal_k_pathway = fig_5_df$k[fig_5_df$pathway_name == i]
generatePlots(seurat_obj = seurat_obj,
pathway_name = i,
pathway_df = pathway_df,
optimal_k_pathway = optimal_k_pathway,
min_genes_pathway = min_genes_pathway,
min_expr_threshold = min_expr_threshold,
diverse_quantile = diverse_quantile,
silh_res_dir = silh_res_dir)
}
}
for (i in pathway_list_dispersion){
if (fig_5_df$width[fig_5_df$pathway_name == i] < 0.35){
optimal_k_pathway = fig_5_df$k[fig_5_df$pathway_name == i]
generatePlots(seurat_obj = seurat_obj,
pathway_name = i,
pathway_df = pathway_df,
optimal_k_pathway = optimal_k_pathway,
min_genes_pathway = min_genes_pathway,
min_expr_threshold = min_expr_threshold,
diverse_quantile = diverse_quantile,
silh_res_dir = silh_res_dir)
}
}
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_6C.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_6C.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_S3A.R")
div_res_mean_pairwise
div_res_max_pairwise
div_res_quant_pairwise
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_Computations.R")
pathway_df$pathway %>% unique()
detectCores()-1
mclapply(pathway_df$pathway %>% unique(), runPipeline, mc.cores = detectCores()-1)
source("./scripts/analysis/imports.R")
pathway_name = "Tgf-beta family receptors"
min_genes_pathway = 2 # tgfb min. number of genes expressed
min_expr_threshold = 0.3 # tgfb minimum expression threshold for gene to be on
optimal_k_pathway = 30 # doesn't matter for this!
diverse_quantile = 0.9
computePathwayDist <- function(pipe_run){
pathway_dist = dist.cosine(as.matrix(pipe_run$data_frame[,pathway_genes]))
pathway_dist_df <- data.frame(t(combn(pipe_run$data_frame$cell_id,2)),
as.numeric(pathway_dist))
colnames(pathway_dist_df) <- c("cell_id_1", "cell_id_2", "pathway_dist")
return(pathway_dist_df)
}
plotPathwayGlobalDist <- function(pathway_name = ""){
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
scrambled_pipe_run <- pipe_run
scrambled_pipe_run$data_frame[,pathway_genes] <- randomizeColumns(df = pipe_run$data_frame[,pathway_genes],
pathway_genes = pathway_genes)
real_pathway_dist_df <- computePathwayDist(pipe_run)
scrambled_pathway_dist_df <- computePathwayDist(scrambled_pipe_run)
# GLOBAL DISTANCE: euclidean or cosine distance in PCA space
global_coords = Embeddings(seurat_obj, reduction='pca')
global_coords = global_coords[pipe_run$data_frame$cell_id, n_pcs] # already set row names as cell id
global_dist = dist(global_coords)
global_dist_df <- data.frame(t(combn(rownames(global_coords),2)),
as.numeric(global_dist))
colnames(global_dist_df) <- c("cell_id_1", "cell_id_2", "global_dist")
real_df <-  merge(x = real_pathway_dist_df,
y = global_dist_df,
by.x = c("cell_id_1",
"cell_id_2"))
scrambled_df <-  merge(x = scrambled_pathway_dist_df,
y = global_dist_df,
by.x = c("cell_id_1",
"cell_id_2"))
return(list(real_df = real_df, scrambeld_df = scrambled_df))
}
plotPathwayGlobalDist(pathway_name = pathway_name)
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
pathway_genes
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
plotPathwayGlobalDist(pathway_name = pathway_name)
source("~/.active-rstudio-document")
plotPathwayGlobalDist(pathway_name = pathway_name)
master_seurat
pathway_df
pathway_name
plotPathwayGlobalDist(pathway_name = pathway_name)
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
pathway_genes
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
scrambled_pipe_run <- pipe_run
scrambled_pipe_run$data_frame[,pathway_genes] <- randomizeColumns(df = pipe_run$data_frame[,pathway_genes],
pathway_genes = pathway_genes)
real_pathway_dist_df <- computePathwayDist(pipe_run)
scrambled_pathway_dist_df <- computePathwayDist(scrambled_pipe_run)
# GLOBAL DISTANCE: euclidean or cosine distance in PCA space
global_coords = Embeddings(master_seurat, reduction='pca')
global_coords = global_coords[pipe_run$data_frame$cell_id, n_pcs] # already set row names as cell id
global_dist = dist(global_coords)
global_dist_df <- data.frame(t(combn(rownames(global_coords),2)),
as.numeric(global_dist))
colnames(global_dist_df) <- c("cell_id_1", "cell_id_2", "global_dist")
real_df <-  merge(x = real_pathway_dist_df,
y = global_dist_df,
by.x = c("cell_id_1",
"cell_id_2"))
scrambled_df <-  merge(x = scrambled_pathway_dist_df,
y = global_dist_df,
by.x = c("cell_id_1",
"cell_id_2"))
n_pcs = 1:20
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
scrambled_pipe_run <- pipe_run
scrambled_pipe_run$data_frame[,pathway_genes] <- randomizeColumns(df = pipe_run$data_frame[,pathway_genes],
pathway_genes = pathway_genes)
real_pathway_dist_df <- computePathwayDist(pipe_run)
scrambled_pathway_dist_df <- computePathwayDist(scrambled_pipe_run)
# GLOBAL DISTANCE: euclidean or cosine distance in PCA space
global_coords = Embeddings(master_seurat, reduction='pca')
global_coords = global_coords[pipe_run$data_frame$cell_id, n_pcs] # already set row names as cell id
global_dist = dist(global_coords)
global_dist_df <- data.frame(t(combn(rownames(global_coords),2)),
as.numeric(global_dist))
colnames(global_dist_df) <- c("cell_id_1", "cell_id_2", "global_dist")
real_df <-  merge(x = real_pathway_dist_df,
y = global_dist_df,
by.x = c("cell_id_1",
"cell_id_2"))
scrambled_df <-  merge(x = scrambled_pathway_dist_df,
y = global_dist_df,
by.x = c("cell_id_1",
"cell_id_2"))
scrambled_df
scrambled_df %>% dim()
real_df %>% dim()
head(scrambled_df)
head(real_df)
p <- ggplot(merged_df, aes(pathway_dist, global_dist)) +
geom_point(alpha = 0.01)
p <- ggplot(pathway_df, aes(pathway_dist, global_dist)) +
geom_point(alpha = 0.01)
p
p <- ggplot(pathway_df, aes(pathway_dist, global_dist)) +
geom_point(alpha = 0.01)
p
head(pathway_df)
p <- ggplot(real_df, aes(pathway_dist, global_dist)) +
geom_point(alpha = 0.01)
p
p
p <- ggplot(real_df, aes(pathway_dist, global_dist)) +
geom_point(alpha = 0.01)
p
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
scrambled_pipe_run <- pipe_run
scrambled_pipe_run$data_frame[,pathway_genes] <- randomizeColumns(df = pipe_run$data_frame[,pathway_genes],
pathway_genes = pathway_genes)
real_pathway_dist_df <- computePathwayDist(pipe_run)
scrambled_pathway_dist_df <- computePathwayDist(scrambled_pipe_run)
colnames(scrambled_pathway_dist_df)[colnames(scrambled_pathway_dist_df) == 'pathway_dist'] <- 'random_dist'
# GLOBAL DISTANCE: euclidean or cosine distance in PCA space
global_coords = Embeddings(master_seurat, reduction='pca')
global_coords = global_coords[pipe_run$data_frame$cell_id, n_pcs] # already set row names as cell id
global_dist = dist(global_coords)
global_dist_df <- data.frame(t(combn(rownames(global_coords),2)),
as.numeric(global_dist))
colnames(global_dist_df) <- c("cell_id_1", "cell_id_2", "global_dist")
df <- merge(x = real_pathway_dist_df,
y = scrambled_pathway_dist_df,
by.x = c("cell_id_1",
"cell_id_2"))
df <- merge(x = df,
y = global_dist_df,
by.x = c("cell_id_1",
"cell_id_2"))
ggplot(data=df)+geom_density2d(aes(x=scrambled_dist,y=global_dist))
ggplot(data=df)+geom_density2d(aes(x=random_dist,y=global_dist))
ggplot(data=df)+geom_density2d(aes(x=random_dist,y=global_dist)) + geom_density2d(x=real_dist,y=global_dist)
ggplot(data=df)+geom_density2d(aes(x=random_dist,y=global_dist)) + geom_density2d(x=pathway_dist,y=global_dist)
head(df)
ggplot(data=df)+geom_density2d(aes(x=random_dist,y=global_dist)) + geom_density2d(aes(x=pathway_dist,y=global_dist))
ggplot(data=df) +geom_bin2d(bins = 70) +
scale_fill_continuous(type = "viridis")
ggplot(data=df) +geom_bin2d(aes(x=random_dist,y=global_dist), bins = 70) +
scale_fill_continuous(type = "viridis")
ggplot(data=df) +geom_bin2d(aes(x=random_dist,y=global_dist), bins = 50) +
scale_fill_continuous(type = "viridis")
ggplot(data=df) +geom_bin2d(aes(x=random_dist,y=global_dist), bins = 100) +
scale_fill_continuous(type = "viridis")
ggplot(data=df) +geom_bin2d(aes(x=random_dist,y=global_dist), bins = 10) +
scale_fill_continuous(type = "viridis")
ggplot(data=df) +geom_bin2d(aes(x=random_dist,y=global_dist), bins = 500) +
scale_fill_continuous(type = "viridis")
ggplot(data=df) +geom_bin2d(aes(x=random_dist,y=global_dist), bins = 100) +
scale_fill_continuous(type = "viridis")
ggplot(data=df) +geom_hex(aes(x=random_dist,y=global_dist), bins = 100) +
scale_fill_continuous(type = "viridis")
ggplot(data=df) +geom_hex(aes(x=random_dist,y=global_dist), bins = 50) +
scale_fill_continuous(type = "viridis")
ggplot(data=df) +geom_hex(aes(x=random_dist,y=global_dist), bins = 10) +
scale_fill_continuous(type = "viridis")
ggplot(data=df) +geom_hex(aes(x=random_dist,y=global_dist), bins = 70) +
scale_fill_continuous(type = "viridis")
ggplot(data=df) +geom_hex(aes(x=random_dist,y=global_dist), bins = 70) +
scale_fill_continuous(type = "viridis")+geom_point(aes(x=pathway_dist,y=global_dist))
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_Computations.R")
mclapply(pathway_df$pathway %>% unique(), runPipeline, mc.cores = detectCores()-1)
warnings()
(pathway_df$pathway %>% unique())[[121]]
(pathway_df$pathway %>% unique())[[142]]
(pathway_df$pathway %>% unique())[[114]]
(pathway_df$pathway %>% unique())[[107]]
(pathway_df$pathway %>% unique())[[93]]
(pathway_df$pathway %>% unique())[[86]]
(pathway_df$pathway %>% unique())[[2]]
readRDS("scripts/figures/peak_analysis/silhouette_res/silh_rds/Amino Sugar Metabolism_silh_plt_ale.RDS")
readRDS("scripts/figures/peak_analysis/silhouette_res/silh_rds/Eph_l_silh_plt_ale.RDS")
file.exists("data/processed_data/tgfb_silh_plt.RDS")
for (i in (pathway_df$pathway %>% unique())){print("/" in i)}
for (i %in% (pathway_df$pathway %>% unique())){print("/" in i)}
for (i in (pathway_df$pathway %>% unique())){print("/" in i)}
for (i in (pathway_df$pathway %>% unique()))
{}
for (i in (pathway_df$pathway %>% unique())){print(i)}
for (i in (pathway_df$pathway %>% unique())){if ("/" in i){print(i)}}
for (i in (pathway_df$pathway %>% unique())){if (str_detect(i,"/")){print(i)}}
str_replace("hi/", "/", "-")
pathway_df$pathway %>% str_detect("/")
pathway_df[pathway_df$pathway %>% str_detect("/"),"pathway"] <- pathway_df[pathway_df$pathway %>% str_detect("/"),"pathway"] %>% str_replace("/","-")
pathway_df$pathway %>% str_detect("/")
file.exists("html_imports.R")
!file.exists("html_imports.R")
!file.exists("html_imports_bi.R")
source("./scripts/analysis/imports.R")
source("./scripts/analysis/Figure_5_Functions.R") # Script with Fig. 5 functions
## Issues w/ saving filenames with "/" character
pathway_df[pathway_df$pathway %>% str_detect("/"),"pathway"] <- pathway_df[pathway_df$pathway %>% str_detect("/"),"pathway"] %>% str_replace("/","-")
## Run the silhouette score and dispersion computations for all pathways
# Directories to save results to
silh_res_dir = "./scripts/figures/peak_analysis/silhouette_res/silh_rds/"
dispersion_dir = "./scripts/figures/peak_analysis/dispersion/disp_rds/"
min_genes_pathway = 2
min_expr_threshold = 0.3
diverse_quantile = 0.9
max_k = 200 # Number of clusters for which we want to compute silhoutte scores
# Run pipeline in parallel
## Uses Global Variables for efficient parallel computing
runPipeline <- function(pathway_name =""){
if (!file.exists(paste(silh_res_dir, pathway_name, ".RDS", sep=""))){
print( paste( "Running ..", pathway_name , " " , Sys.time() ))
pathway_genes <- genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
if (length(pathway_genes) > 7){
# if it founds an error, it won't break but it will save the pathway as NA
# we can then read the outputs and re-run the NA with a lower number of maxk
# the most likely cause of error is too many clusters
silh_plt = tryCatch({silhouettePlot(pathway_genes = pathway_genes,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold,
n_bootstraps = 100,
seurat_obj = master_seurat,
max_k = max_k)
}, error = function(e) { print(e); return ("NA")
}, finally = { print("error handled") } )
# save the file! This is what we want!!
if(silh_plt != "NA"){
saveRDS(silh_plt, paste(silh_res_dir, pathway_name, ".RDS", sep=""))
silh_z_plt <- silhouette_zscore(silh_result = silh_plt,
min_expr = min_expr_threshold,
x_offset = 6,
max.y = 0.43,
min.y = 0.17,
k_max = silh_plt[[2]]$k %>% max()
)
optimal_k_pathway <- perc_k_finder(z_score = silh_z_plt[[2]],
percentile = 0.9)
# Computes the dispersion on cell types expressing pathway using distance in PCA space
control_res  = fullControlPathway(pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
seurat_obj = master_seurat,
n_samples = 100,
filter_manual = T,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold,
n_pcs = 100,
manual_embedding = pca_proj, # PCA embedding for dispersion
dist_metric = "euclidean"
)
saveRDS(control_res, paste(dispersion_dir, pathway_name, ".RDS", sep=""))
# make the plot -- less important
print( paste( "Done ..", pathway_name , " " , Sys.time() ))
}else{
print( paste( "Error ..", pathway_name , " " , Sys.time() ))
}
}
}
}
mclapply(pathway_df$pathway %>% unique(), runPipeline, mc.cores = detectCores()-1)
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_Computations.R")
mclapply(pathway_df$pathway %>% unique(), runPipeline, mc.cores = detectCores()-2)
pathway_df$pathway %>% unique()[9]
(pathway_df$pathway %>% unique())[9]
pathway_df[pathway_df$pathway == (pathway_df$pathway %>% unique())[9]]
pathway_df[pathway_df$pathway == (pathway_df$pathway %>% unique())[9],]
pathway_df[5874,]
master_seurat[alh-1,]
master_seurat %>% dim()
master_seurat["alh-1",]
master_seurat["Bmp1"]
master_seurat["alh-1",]
master_seurat["Aoc3",]
pathway_name = "beta-Alanine Metabolism"
pathway_genes <- genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
pathway_genes
pathway_genes %>% length()
source("./scripts/analysis/imports.R")
source("./scripts/analysis/Figure_5_Functions.R") # Script with Fig. 5 functions
## Issues w/ saving filenames with "/" character
pathway_df[pathway_df$pathway %>% str_detect("/"),"pathway"] <- pathway_df[pathway_df$pathway %>% str_detect("/"),"pathway"] %>% str_replace("/","-")
## Run the silhouette score and dispersion computations for all pathways
# Directories to save results to
silh_res_dir = "./scripts/figures/peak_analysis/silhouette_res/silh_rds/"
dispersion_dir = "./scripts/figures/peak_analysis/dispersion/disp_rds/"
min_genes_pathway = 2
min_expr_threshold = 0.3
diverse_quantile = 0.9
max_k = 150 # Number of clusters for which we want to compute silhoutte scores
# Run pipeline in parallel
## Uses Global Variables for efficient parallel computing
runPipeline <- function(pathway_name =""){
if (!file.exists(paste(silh_res_dir, pathway_name, ".RDS", sep=""))){
print( paste( "Running ..", pathway_name , " " , Sys.time() ))
pathway_genes <- genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
if (length(pathway_genes) > 7){
# if it founds an error, it won't break but it will save the pathway as NA
# we can then read the outputs and re-run the NA with a lower number of maxk
# the most likely cause of error is too many clusters
silh_plt = tryCatch({silhouettePlot(pathway_genes = pathway_genes,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold,
n_bootstraps = 100,
seurat_obj = master_seurat,
max_k = max_k)
}, error = function(e) { print(e); return ("NA")
}, finally = { print("error handled") } )
# save the file! This is what we want!!
if(silh_plt != "NA"){
saveRDS(silh_plt, paste(silh_res_dir, pathway_name, ".RDS", sep=""))
silh_z_plt <- silhouette_zscore(silh_result = silh_plt,
min_expr = min_expr_threshold,
x_offset = 6,
max.y = 0.43,
min.y = 0.17,
k_max = silh_plt[[2]]$k %>% max()
)
optimal_k_pathway <- perc_k_finder(z_score = silh_z_plt[[2]],
percentile = 0.9)
# Computes the dispersion on cell types expressing pathway using distance in PCA space
control_res  = fullControlPathway(pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
seurat_obj = master_seurat,
n_samples = 100,
filter_manual = T,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold,
n_pcs = 100,
manual_embedding = pca_proj, # PCA embedding for dispersion
dist_metric = "euclidean"
)
saveRDS(control_res, paste(dispersion_dir, pathway_name, ".RDS", sep=""))
# make the plot -- less important
print( paste( "Done ..", pathway_name , " " , Sys.time() ))
}else{
print( paste( "Error ..", pathway_name , " " , Sys.time() ))
}
}
}
}
for (i in c(9, 14, 28, 49, 64, 83, 136, 146)){
runPipeline(pathway_name = (pathway_df$pathway %>% unique())[i])
}
readRDS("scripts/figures/peak_analysis/dispersion/Amino Sugar Metabolism_diversity.RDS")
readRDS("scripts/figures/peak_analysis/dispersion/disp_rds/Amino Sugar Metabolism.RDS")
readRDS("scripts/figures/peak_analysis/dispersion/Amino Sugar Metabolism_diversity.RDS") -> x
readRDS("scripts/figures/peak_analysis/dispersion/disp_rds/Amino Sugar Metabolism.RDS") -> y
x$profiles %>% head()
x$profiles$global_cluster
x$profiles %>% head()
x$diversity
x$recurrence
x
x$rank
y$rank
source("~/Documents/Research/Elowitz Lab/motifs/scripts/preprocessing/Processing_Pathbank.R")
