p_umap <- motifs_umap(control_res = control_res,
pathway_genes = pathway_genes,
seurat_obj = seurat_obj,
glasbey_use = F,
use_pca = T,
n_pcs = 1:20,
clust_method = "ward.D2",
dist_metric = "cosine",
ncol = 6,
text_size = 10,
diverse_quantile = diverse_quantile)
coexp_heat <- coexpHeatmap(seurat_obj = seurat_obj,
pathway_genes = pathway_genes,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold)
split_pathway_genes = split(pathway_genes,
cut(seq_along(pathway_genes),
3,
labels = FALSE))
grobs = list(textGrob(paste("\n",
paste(split_pathway_genes$`1`,
collapse="\n"),
sep=""),
just = "center",
gp=gpar(fontsize=10)),
textGrob(paste("Pathway genes\n",
paste(split_pathway_genes$`2`,
collapse="\n"),
sep=""),
just = "center",
gp=gpar(fontsize=10)),
textGrob(paste("\n",
paste(split_pathway_genes$`3`,
collapse="\n"),
sep=""),
just = "center",
gp=gpar(fontsize=10)),
coexp_heat +
theme(plot.margin = unit(c(0,0,0,2), "cm")),
as.ggplot(pipe_run$plot),
silh_z_plt[[1]] +
geom_vline(xintercept = which.max(silh_z_plt[[2]]),
linetype = "solid")  +
theme(axis.title = element_text(size=16),
plot.title = element_text(size=20),
axis.text = element_text(size=14)),
g_umap +
theme(plot.title = element_text(size=20),
plot.margin = unit(c(0,1,1.5,0), "cm")),
ecdf_plot +
theme(axis.title = element_text(size=16),
plot.title = element_text(size=20),
axis.text = element_text(size=14),
legend.text = element_text(size=10),
legend.title = element_text(size=12),
plot.margin = unit(c(0,1,0,0), "cm")),
rank_plot +
theme(axis.title = element_text(size=16),
plot.title = element_text(size=20),
axis.text = element_text(size=14),
plot.margin = unit(c(0,1,0,0), "cm")),
as.ggplot(motif_heat$plot) +
ggtitle(label=bquote("Motifs, Dispersion" ~ phantom() >= .(100 * diverse_quantile)^{th} ~ "percentile")) +
theme(plot.title = element_text(size=20)),
motif_ct +
theme(plot.margin = unit(c(2,0,0,0), "cm")) +
ggtitle("Motif Tissue Composition") +
theme(plot.title = element_text(size=20))
)
lay = rbind(c(1,2,3,6,6,6,5,5),
c(4,4,4,6,6,6,5,5),
c(4,4,4,6,6,6,5,5),
c(7,7,8,8,9,9,5,5),
c(7,7,8,8,9,9,5,5),
c(10,10,10,11,11,11,5,5),
c(10,10,10,11,11,11,5,5),
c(10,10,10,11,11,11,5,5),
c(10,10,10,NA,NA,NA,5,5))
ml <- m.grid.arrange(p1 = grobs,
lay1 = lay,
p2 = p_umap,
k_final = optimal_k_pathway,
pathway_name = pathway_name
)
ggsave(filename = paste(silh_res_dir, pathway_name, ".pdf", sep=""), plot = ml, width = 17, height = 22)
write.csv(x = control_res$profiles %>% select(cell_id, class_label),
file = paste(silh_res_dir, pathway_name, "_profiles.csv", sep=""))
}
seurat_obj = master_seurat
pathway_name = "RNA-splicing by SR protein family"
min_genes_pathway = 2
min_expr_threshold = 0.3
diverse_quantile = 0.9
silhouette_zscore(silh_result = silh_result,
min_expr = min_expr,
x_offset = 6,
min.y = -0.05,
max.y = 0.55,
k_max = silh_result[[2]]$k %>% max()
) -> res
silhouette_zscore(silh_result = silh_plt,
min_expr = min_expr,
x_offset = 6,
min.y = -0.05,
max.y = 0.55,
k_max = silh_plt[[2]]$k %>% max()
) -> res
optimal_k_pathway = perc_k_finder(z_score = res[[2]], percentile = 0.9)
silh_res_dir
generatePlots(seurat_obj = seurat_obj,
pathway_name = i,
pathway_df = pathway_df,
optimal_k_pathway = optimal_k_pathway,
min_genes_pathway = min_genes_pathway,
min_expr_threshold = min_expr_threshold,
diverse_quantile = diverse_quantile,
silh_res_dir = silh_res_dir)
generatePlots(seurat_obj = seurat_obj,
pathway_name = "Bmp",
pathway_df = pathway_df,
optimal_k_pathway = optimal_k_pathway,
min_genes_pathway = min_genes_pathway,
min_expr_threshold = min_expr_threshold,
diverse_quantile = diverse_quantile,
silh_res_dir = silh_res_dir)
pathway_df %>% filter(pathway %>% str_detect("Bmp"))
pathway_df <- read.csv("data/raw_data/pathbank/pathway_df.csv", row.names = 1)
head(pathway_df)
pathway_df %>% filter(pathway %>% str_detect("Bmp"))
generatePlots(seurat_obj = seurat_obj,
pathway_name = "Bmp",
pathway_df = pathway_df,
optimal_k_pathway = optimal_k_pathway,
min_genes_pathway = min_genes_pathway,
min_expr_threshold = min_expr_threshold,
diverse_quantile = diverse_quantile,
silh_res_dir = silh_res_dir)
res
dev.off()
res
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_6C.R")
all_cell_type
all_cell_type %>% write.csv("scripts/figures/Supplementary_File_5.csv")
all_cell_type %>% write.csv("scripts/figures/Supplementary File 5.csv")
head(all_cell_type)
source("./scripts/analysis/imports_new.R")
master_seurat@meta.data$dataset %>% count()
master_seurat@meta.data$dataset %>% sum()
master_seurat@meta.data %>% group_by(dataset) %>% count()
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Fig_5_Silhouette_Computations.R")
source("./scripts/analysis/imports_new.R")
# Run pipeline in parallel
runSilhBoot <- function(pathway_name = "",
output_dir = "",
pathway_df = pathway_df,
min_genes_on = 2,
min_expr = 0.3,
n_bootstraps = 5,
max_k = 100,
seurat_obj = c()){
print( paste( "Running ..", pathway_name , " " , Sys.time() ))
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df)
# if it founds an error, it won't break but it will save the pathway as NA
# we can then read the outputs and re-run the NA with a lower number of maxk
# the most likely cause of error is too many clusters
silh_plt = tryCatch({silhouettePlot(pathway_genes = pathway_genes,
min_genes_on = min_genes_on,
min_expr = min_expr,
n_bootstraps = n_bootstraps,
seurat_obj = seurat_obj,
max_k = max_k)
}, error = function(e) { print(e); return ("NA")
}, finally = { print("error handled") } )
# save the file! This is what we want!!
if(silh_plt != "NA"){
saveRDS(silh_plt, paste(output_dir,
pathway_name,
"_silh_plt.RDS",
sep = ""))
}else{
print( paste( "Error ..", pathway_name , " " , Sys.time()))
}
}
min_genes_on = 2
min_expr = 0.3
seurat_obj = master_seurat
max_k = 200
output_dir = "data/processed_data/Silhouette_PathBank/"
mclapply(unique(pathway_df$pathway), # List of pathways
FUN = runSilhBoot,
min_genes_on=min_genes_on,
pathway_df,
min_expr=min_expr,
seurat_obj = seurat_obj,
max_k = max_k,
output_dir = output_dir,
mc.cores = 4)
source("./scripts/analysis/imports_new.R")
# Run pipeline in parallel
runSilhBoot <- function(pathway_name = "",
output_dir = "",
pathway_df = pathway_df,
min_genes_on = 2,
min_expr = 0.3,
n_bootstraps = 5,
max_k = 100,
seurat_obj = c()){
print( paste( "Running ..", pathway_name , " " , Sys.time() ))
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df)
# if it founds an error, it won't break but it will save the pathway as NA
# we can then read the outputs and re-run the NA with a lower number of maxk
# the most likely cause of error is too many clusters
silh_plt = tryCatch({silhouettePlot(pathway_genes = pathway_genes,
min_genes_on = min_genes_on,
min_expr = min_expr,
n_bootstraps = n_bootstraps,
seurat_obj = seurat_obj,
max_k = max_k)
}, error = function(e) { print(e); return ("NA")
}, finally = { print("error handled") } )
# save the file! This is what we want!!
if(silh_plt != "NA"){
saveRDS(silh_plt, paste(output_dir,
pathway_name,
"_silh_plt.RDS",
sep = ""))
}else{
print( paste( "Error ..", pathway_name , " " , Sys.time()))
}
}
min_genes_on = 2
min_expr = 0.3
seurat_obj = master_seurat
max_k = 200
output_dir = "data/processed_data/Silhouette_PathBank/"
mclapply(unique(pathway_df$pathway), # List of pathways
FUN = runSilhBoot,
min_genes_on=min_genes_on,
pathway_df,
min_expr=min_expr,
seurat_obj = seurat_obj,
n_bootstraps = 100,
max_k = max_k,
output_dir = output_dir,
mc.cores = 4)
library(Seurat)
library(dplyr)
library(Matrix)
library(stringr)
library(readr)
library(here)
pathway.genes<-function(pathway ="bmp"){
bmp.receptors<-c("Bmpr1a","Bmpr1b","Acvr1","Acvrl1","Acvr1b","Tgfbr1","Acvr1c","Acvr2a","Acvr2b","Bmpr2","Tgfbr2")
bmp.ligands<-c("Bmp2","Bmp3","Bmp4","Bmp5","Bmp6","Bmp7",
"Bmp8a","Gdf3","Gdf9","Gdf10","Gdf11","Gdf15")
bmp.smads<-c("Smad1" ,"Smad2" ,"Smad3", "Smad4", "Smad5", "Smad6", "Smad7", "Smad9")
notch.all<-c(
"Dll1",
"Dll3",
"Dll4",
"Dtx1",
"Jag1",
"Jag2",
"Adam10",
"Psen1",
"Psen2",
"Psenen",
"Notch1",
"Notch2",
"Notch3",
"Notch4")
if(pathway =="bmp"){
genes.plot = c(bmp.receptors,bmp.ligands,bmp.smads)
}else if(pathway=="notch"){
genes.plot = notch.all
}
return (genes.plot)
}
tabula.path ="./data/raw_data/sc_data/tms_FACS/"
FACS_files = list.files(paste(tabula.path,"/FACS" ,sep=""), full.names = TRUE)
FACS_files
raw.data.list = list()
for (file in FACS_files){
#read each file (csv count matrices sorted by tissue)
# FACS_files[1] ="/home/agranado/MEGA/Caltech/rnaseq/tabula-muris/00_data_ingest/00_facs_raw_data/FACS/Aorta-counts.csv"
raw.data <- read.csv(file, row.names = 1)
raw.data <- Matrix(as.matrix(raw.data), sparse = TRUE)
raw.data.list <- append(raw.data.list, raw.data)
}
dim(raw.data.list[[2]])
raw.data.list
length(raw.data.l)
raw.data.list %>% length()
library(Seurat)
library(dplyr)
library(Matrix)
library(stringr)
library(readr)
library(here)
pathway.genes<-function(pathway ="bmp"){
bmp.receptors<-c("Bmpr1a","Bmpr1b","Acvr1","Acvrl1","Acvr1b","Tgfbr1","Acvr1c","Acvr2a","Acvr2b","Bmpr2","Tgfbr2")
bmp.ligands<-c("Bmp2","Bmp3","Bmp4","Bmp5","Bmp6","Bmp7",
"Bmp8a","Gdf3","Gdf9","Gdf10","Gdf11","Gdf15")
bmp.smads<-c("Smad1" ,"Smad2" ,"Smad3", "Smad4", "Smad5", "Smad6", "Smad7", "Smad9")
notch.all<-c(
"Dll1",
"Dll3",
"Dll4",
"Dtx1",
"Jag1",
"Jag2",
"Adam10",
"Psen1",
"Psen2",
"Psenen",
"Notch1",
"Notch2",
"Notch3",
"Notch4")
if(pathway =="bmp"){
genes.plot = c(bmp.receptors,bmp.ligands,bmp.smads)
}else if(pathway=="notch"){
genes.plot = notch.all
}
return (genes.plot)
}
tabula.path ="./data/raw_data/sc_data/tms_FACS/"
FACS_files = list.files(paste(tabula.path,"/FACS" ,sep=""), full.names = TRUE)
raw.data.list = list()
for (file in FACS_files){
#read each file (csv count matrices sorted by tissue)
# FACS_files[1] ="/home/agranado/MEGA/Caltech/rnaseq/tabula-muris/00_data_ingest/00_facs_raw_data/FACS/Aorta-counts.csv"
raw.data <- read.csv(file, row.names = 1)
raw.data <- Matrix(as.matrix(raw.data), sparse = TRUE)
raw.data.list <- append(raw.data.list, raw.data)
}
dim(raw.data.list[[2]])
raw.data <- do.call(cbind, raw.data.list)
cell_order_FACS <- order(colnames(raw.data))
raw.data = raw.data[,cell_order_FACS]
meta.data <- read.csv(paste(tabula.path,"/metadata_FACS.csv",sep=""))
head(meata.dat)
head(meata.data)
head(meta.data)
plates <- str_split(colnames(raw.data),"[.]", simplify = TRUE)[,2]
rownames(meta.data) <- meta.data$plate.barcode
cell.meta.data <- meta.data[plates,]
rownames(cell.meta.data) <- colnames(raw.data)
erccs <- grep(pattern = "^ERCC-", x = rownames(x = raw.data), value = TRUE)
percent.ercc <- Matrix::colSums(raw.data[erccs, ])/Matrix::colSums(raw.data)
sum.ercc<-Matrix::colSums(raw.data[erccs, ])
ercc.index <- grep(pattern = "^ERCC-", x = rownames(x = raw.data), value = FALSE)
raw.data <- raw.data[-ercc.index,] #remove the ERCC sequences
x11();hist(percent.ercc)
raw.data = raw.data[,percent.ercc<0.15]
high.count.cells = Matrix::colSums(raw.data)>50000 #recommendation for quality control (Sisi)
raw.data  = raw.data[,high.count.cells]
total.reads = Matrix::colSums(raw.data)
bmp.all = pathway.genes(pathway = "bmp")
bmp.indexes=match(bmp.all,rownames(raw.data))
raw.data <-raw.data[bmp.indexes,]
counts.cells = Matrix::colSums(raw.data)
raw.data = raw.data[,counts.cells>length(bmp.all)*2] #keep cells that have at least this N of counts
raw.logical = raw.data>0
genes.at.least.one = Matrix::colSums(raw.logical)
raw.data= raw.data[,genes.at.least.one>=3] #ten percent of genes in the pathway (31 genes)
#explore the raw.data  :
#would be good to filter based on CV but we can't do that yet...TO DO
cv.bmp <-apply(raw.data,1,sd)/apply(raw.data,1,mean)
cell.meta.filter = cell.meta.data[colnames(raw.data), ]
total.reads = total.reads[colnames(raw.data)]
#last step: filter duplicated cells (with exact same count profiles)
duplicated.cells = duplicated(t(as.matrix(raw.data)))
raw.data <- as.matrix(raw.data)
raw.data=raw.data[,!duplicated.cells]
#remove the duplicate from the metadata
cell.meta.filter=cell.meta.filter[colnames(raw.data),]
total.reads = total.reads[colnames(raw.data)]
tiss <- CreateSeuratObject(raw.data = raw.data)
tiss <- AddMetaData(object = tiss, cell.meta.data)
tiss <- AddMetaData(object = tiss, percent.ercc, col.name = "percent.ercc")
tiss<- AddMetaData(object = tiss, total.reads,col.name = 'total.reads')
head(raw.data)
raw.data[1:6,1:6]
tiss <- CreateSeuratObject(counts = raw.data)
tiss <- AddMetaData(object = tiss, cell.meta.data)
tiss <- AddMetaData(object = tiss, percent.ercc, col.name = "percent.ercc")
tiss<- AddMetaData(object = tiss, total.reads,col.name = 'total.reads')
colnames(tiss@meta.data)[colnames(tiss@meta.data) == 'nUMI'] <- 'nReads'
tiss
dim(raw.data)
length(bmp.all)
library(Seurat)
library(dplyr)
library(Matrix)
library(stringr)
library(readr)
library(here)
tabula.path ="./data/raw_data/tabula_muris_facs/"
FACS_files = list.files(paste(tabula.path,"/FACS" ,sep=""), full.names = TRUE)
raw.data.list = list()
for (file in FACS_files){
#read each file (csv count matrices sorted by tissue)
# FACS_files[1] ="/home/agranado/MEGA/Caltech/rnaseq/tabula-muris/00_data_ingest/00_facs_raw_data/FACS/Aorta-counts.csv"
raw.data <- read.csv(file, row.names = 1)
raw.data <- Matrix(as.matrix(raw.data), sparse = TRUE)
raw.data.list <- append(raw.data.list, raw.data)
}
#dim(raw.data.list[[2]])
#  [1] 23433  1638 # 1638 cells in this tissue, 23433 genes for ALL tissues]
# join the matrix with do.call cbind
raw.data <- do.call(cbind, raw.data.list)
cell_order_FACS <- order(colnames(raw.data))
raw.data = raw.data[,cell_order_FACS]
meta.data <- read.csv(paste(tabula.path,"/metadata_FACS.csv",sep=""))
meta.data <- read.csv(paste(tabula.path,"metadata_FACS.csv",sep=""))
cell_order_FACS <- order(colnames(raw.data))
library(Seurat)
library(dplyr)
library(Matrix)
library(stringr)
library(readr)
library(here)
tabula.path ="./data/raw_data/tabula_muris_facs/"
FACS_files = list.files(paste(tabula.path,"/FACS" ,sep=""), full.names = TRUE)
raw.data.list = list()
for (file in FACS_files){
#read each file (csv count matrices sorted by tissue)
# FACS_files[1] ="/home/agranado/MEGA/Caltech/rnaseq/tabula-muris/00_data_ingest/00_facs_raw_data/FACS/Aorta-counts.csv"
raw.data <- read.csv(file, row.names = 1)
raw.data <- Matrix(as.matrix(raw.data), sparse = TRUE)
raw.data.list <- append(raw.data.list, raw.data)
}
raw.data <- do.call(cbind, raw.data.list)
dim(raw.data)
FACS_files
tabula.path ="./data/raw_data/tabula_muris_facs/"
FACS_files = list.files(paste(tabula.path,"/FACS" ,sep=""), full.names = TRUE)
raw.data.list = list()
for (file in FACS_files){
#read each file (csv count matrices sorted by tissue)
# FACS_files[1] ="/home/agranado/MEGA/Caltech/rnaseq/tabula-muris/00_data_ingest/00_facs_raw_data/FACS/Aorta-counts.csv"
raw.data <- read.csv(file, row.names = 1)
raw.data <- Matrix(as.matrix(raw.data), sparse = TRUE)
raw.data.list <- append(raw.data.list, raw.data)
}
FACS_files
getwd()
tabula.path ="./data/raw_data/tabula_muris_facs/"
FACS_files
FACS_files = list.files(paste(tabula.path,"/FACS" ,sep=""), full.names = TRUE)
FACS_files
tabula.path ="./data/raw_data/sc_data/tms_FACS"
FACS_files = list.files(paste(tabula.path,"/FACS" ,sep=""), full.names = TRUE)
FACS_files
raw.data.list = list()
for (file in FACS_files){
#read each file (csv count matrices sorted by tissue)
# FACS_files[1] ="/home/agranado/MEGA/Caltech/rnaseq/tabula-muris/00_data_ingest/00_facs_raw_data/FACS/Aorta-counts.csv"
raw.data <- read.csv(file, row.names = 1)
raw.data <- Matrix(as.matrix(raw.data), sparse = TRUE)
raw.data.list <- append(raw.data.list, raw.data)
}
dim(raw.data.list[[2]])
raw.data <- do.call(cbind, raw.data.list)
cell_order_FACS <- order(colnames(raw.data))
raw.data = raw.data[,cell_order_FACS]
meta.data <- read.csv(paste(tabula.path,"metadata_FACS.csv",sep=""))
tabula.path ="./data/raw_data/sc_data/tms_FACS/"
meta.data <- read.csv(paste(tabula.path,"metadata_FACS.csv",sep=""))
head(meta.data)
plates <- str_split(colnames(raw.data),"[.]", simplify = TRUE)[,2]
rownames(meta.data) <- meta.data$plate.barcode
#let's extract the plate information for all cells,
#plates is an array with the plate.id for each cell in the raw.data matrix
cell.meta.data <- meta.data[plates,]
rownames(cell.meta.data) <- colnames(raw.data)
erccs <- grep(pattern = "^ERCC-", x = rownames(x = raw.data), value = TRUE)
percent.ercc <- Matrix::colSums(raw.data[erccs, ])/Matrix::colSums(raw.data)
sum.ercc<-Matrix::colSums(raw.data[erccs, ])
ercc.index <- grep(pattern = "^ERCC-", x = rownames(x = raw.data), value = FALSE)
raw.data <- raw.data[-ercc.index,]
head(raw.data)
dim(raw.data)
x11();hist(percent.ercc)
raw.data = raw.data[,percent.ercc<0.15]
dim(raw.data)
high.count.cells = Matrix::colSums(raw.data)>50000 #recommendation for quality control (Sisi)
raw.data  = raw.data[,high.count.cells]
dim(raw.data)
total.reads = Matrix::colSums(raw.data)
cell.meta.filter = cell.meta.data[colnames(raw.data), ]
total.reads = total.reads[colnames(raw.data)]
duplicated.cells = duplicated(t(as.matrix(raw.data)))
raw.data <- as.matrix(raw.data)
raw.data=raw.data[,!duplicated.cells]
#remove the duplicate from the metadata
cell.meta.filter=cell.meta.filter[colnames(raw.data),]
total.reads = total.reads[colnames(raw.data)]
tiss <- CreateSeuratObject(raw.data = raw.data)
tiss <- CreateSeuratObject(counts = raw.data, assay = "RNA")
tiss
tiss <- AddMetaData(object = tiss, cell.meta.data)
tiss <- AddMetaData(object = tiss, percent.ercc, col.name = "percent.ercc")
tiss<- AddMetaData(object = tiss, total.reads,col.name = 'total.reads')
ribo.genes <- grep(pattern = "^Rp[sl][[:digit:]]", x = rownames(x = tiss@data), value = TRUE)
percent.ribo <- Matrix::colSums(tiss@raw.data[ribo.genes, ])/Matrix::colSums(tiss@raw.data)
tiss <- AddMetaData(object = tiss, metadata = percent.ribo, col.name = "percent.ribo")
CreateSeuratObject(raw.data = raw.data)
raw.data[1:6,1:6]
