counter
counter = 0
for (pathway_name in unique(pathway_df$pathway)){
pathway_genes <- genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
if (length(pathway_genes) >= 7){
counter = counter + 1
}
}
counter
counter = 0
for (pathway_name in unique(pathway_df$pathway)){
pathway_genes <- genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
if (length(pathway_genes) >= 6){
counter = counter + 1
}
}
counter
counter = 0
for (pathway_name in unique(pathway_df$pathway)){
pathway_genes <- genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
if (length(pathway_genes) >= 5){
counter = counter + 1
}
}
counter
pathway_df$pathway %>% unique() %>% length()
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_Silhouette_Computations.R")
pathway_df$pathway %>% unique()
source("./scripts/analysis/imports.R")
pathway_df$pathway %>% unique()
pathway_df$pathway %>% unique() %>% str_detect("Amino")
(pathway_df$pathway %>% unique())[pathway_df$pathway %>% unique() %>% str_detect("Amino")]
source("./scripts/analysis/imports_new.R")
all_csv <- read.csv("./data/raw_data/pathbank/pathbank_all_proteins.csv")
pathway_filter <- all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Protein") |
(Pathway.Subject == "Signaling")) %>%
group_by(Pathway.Name)
all_csv <- read.csv("./data/raw_data/pathbank/pathbank_all_proteins.csv")
pathway_filter <- all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Protein") |
(Pathway.Subject == "Signaling")) %>%
group_by(Pathway.Name)
pathway_filter$Pathway.Name %>% unique()
pathway_filter$Pathway.Name %>% unique() %>% str_detect("Amino")
(pathway_filter$Pathway.Name %>% unique())[pathway_filter$Pathway.Name %>% unique() %>% str_detect("Amino")]
pathway_filter <- all_csv %>%
filter(Species == "Mus musculus")
(pathway_filter$Pathway.Name %>% unique())[pathway_filter$Pathway.Name %>% unique() %>% str_detect("Amino")]
(pathway_filter$Pathway.Name)[pathway_filter$Pathway.Name %>% unique() %>% str_detect("Amino")]
(pathway_filter$Pathway.Name %>% unique())[pathway_filter$Pathway.Name %>% unique() %>% str_detect("Amino")]
pathway_filter %>% filter(Pathway.Name == "Amino Sugar Metabolism" ) %>% select(Pathway.Subject)
library(dplyr)
all_csv <- read.csv("./data/raw_data/pathbank/pathbank_all_proteins.csv")
pathway_filter <- all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Protein") |
(Pathway.Subject == "Metabolism") | # Optional
(Pathway.Subject == "Signaling")) %>%
group_by(Pathway.Name) %>%
count() %>%
filter(n>5) %>%
select(Pathway.Name) %>%
unique() %>%
pull()
all_csv <- all_csv %>%
filter(Pathway.Name %in% pathway_filter) %>%
select(Pathway.Name, Gene.Name)
colnames(all_csv) <- c("pathway", "gene")
our_pathways <- read.csv("./data/raw_data/pathbank/our_pathways.csv",
row.names = 1)
pathway_df <- rbind(all_csv, our_pathways)
pathway_df$pathway[pathway_df$pathway=='Notch'] <- 'Notch receptors, Dll ligands, and Fringe proteins'
pathway_df$pathway[pathway_df$pathway=='Bmp_Tgfb'] <- 'Tgf-beta family receptors'
pathway_df$pathway[pathway_df$pathway=='Srsf'] <- 'SRSF Splicing Protein Family'
pathway_df$pathway[pathway_df$pathway=='Eph_r'] <- 'Eph A-B receptors'
pathway_df$pathway[pathway_df$pathway=='Eph_l'] <- 'Ephrins'
pathway_df$pathway[pathway_df$pathway=='Wnt'] <- 'Frizzled and Lrp5 6 receptors for Wnt B Catenin Signaling'
pathway_df$pathway[pathway_df$pathway=='Fgfr'] <- 'FGF signaling'
pathway_df$pathway %>% unique()
pathway_df$pathway %>% unique() %>% str_detect("Amino")
pathway_df$pathway %>% unique() %>% str_detect("Amino") %>% sum()
pathway_filter <- all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Protein") |
(Pathway.Subject == "Metabolism") | # Optional
(Pathway.Subject == "Signaling"))
library(dplyr)
all_csv <- read.csv("./data/raw_data/pathbank/pathbank_all_proteins.csv")
pathway_filter <- all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Protein") |
(Pathway.Subject == "Metabolism") | # Optional
(Pathway.Subject == "Signaling"))
pathway_filter$Pathway.Name %>% str_detect("Amino")
pathway_filter$Pathway.Name %>% str_detect("Amino") %>% sum()
pathway_filter$Pathway.Name
pathway_filter$Pathway.Name %>% uniq()
pathway_filter$Pathway.Name %>% unique()
pathway_filter <- all_csv %>%
filter(Species == "Mus musculus")
pathway_filter$Pathway.Name %>% unique()
pathway_filter$Pathway.Name %>% unique() %>% select(Pathway.Name) %>% str_detect("Amino")
pathway_filter$Pathway.Name %>% unique() %>% str_detect("Amino")
pathway_filter$Pathway.Name %>% unique() %>% str_detect("Amino") %>% sum()
pathway_filter[pathway_filter$Pathway.Name %>% unique() %>% str_detect("Amino")]
pathway_filter[pathway_filter$Pathway.Name %>% unique() %>% str_detect("Amino"),]
pathway_filter[pathway_filter$Pathway.Name %>% unique() %>% str_detect("Amino Sugar"),]
pathway_filter[pathway_filter$Pathway.Name %>% unique() %>% str_detect("Amino Sugar"),Pathway.Name]
pathway_filter[pathway_filter$Pathway.Name %>% unique() %>% str_detect("Amino Sugar"),"Pathway.Name"]
pathway_filter <- all_csv %>%
filter(Species == "Mus musculus")
pathway_filter <- all_csv %>%
filter(Species == "Mus musculus") %>% filter(Pathway.Name == "Amino Sugar Metabolism")
pathway_filter
pathway_filter <- all_csv %>%
filter(Species == "Mus musculus")
pathway_filter$Pathway.Subject %>% unique()
source("~/Documents/Research/Elowitz Lab/motifs/scripts/preprocessing/Processing_Pathbank.R")
pathway_df$pathway %>% unique()
counter = 0
for (pathway_name in unique(pathway_df$pathway)){
pathway_genes <- genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
if (length(pathway_genes) >= 7){
counter += 1
}
}
counter = 0
for (pathway_name in unique(pathway_df$pathway)){
pathway_genes <- genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
if (length(pathway_genes) >= 7){
counter = counter + 1
}
}
source("./scripts/analysis/imports.R")
counter = 0
for (pathway_name in unique(pathway_df$pathway)){
pathway_genes <- genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
if (length(pathway_genes) >= 7){
counter = counter + 1
}
}
counter
pathway_df$pathway %>% unique()
pathway_df <- read.table("./data/raw_data/allPathways_listGenes_dec2021.tsv",
header = T,
sep = "\t")
pathway_df$pathway %>% unique()
# Import data -- lists of genes
pathway_df <- read.table("./data/raw_data/allPathways_listGenes_dec2021.tsv",
header = T,
sep = "\t")
# Correct pathway names
pathway_df$pathway[pathway_df$pathway=='Notch'] <- 'Notch receptors, Dll ligands and Fringe proteins'
pathway_df$pathway[pathway_df$pathway=='Bmp_Tgfb'] <- 'Tgf-beta family receptors'
pathway_df$pathway[pathway_df$pathway=='Srsf'] <- 'RNA-splicing by SR protein family'
pathway_df$pathway[pathway_df$pathway=='Eph_r'] <- 'Eph A-B receptors'
pathway_df$pathway[pathway_df$pathway=='Wnt'] <- 'Frizzled and Lrp5 6 receptors for Wnt B Catenin Signaling'
pathway_df$pathway[pathway_df$pathway=='Fgfr'] <- 'FGF cell signaling proteins'
# Add a combined version of Eph ligands + receptors
pathway_df <- rbind(pathway_df, data.frame(pathway = 'Eph receptors and ligands',
gene = pathway_df %>%
dplyr::filter(grepl(pattern = 'Eph', pathway)) %>%
dplyr::pull(gene)))
# fix the names of some pathways
pathway_df$pathway <- pathway_df$pathway %>% str_replace('/', ' ')
pathway_df$pathway <- pathway_df$pathway %>% str_replace('\\(', ' ')
pathway_df$pathway <- pathway_df$pathway %>% str_replace('\\)', ' ')
pathway_df$pathway <- pathway_df$pathway %>% str_replace('â€“', '-')
pathway_df$pathway %>% unique()
pathway_df %>% filter(pathway_name == "Bmp_fun")
pathway_df %>% filter(pathway_name == "Bmp_fun") %>% head()
pathway_df %>% filter(pathway == "Bmp_fun") %>% head()
source("~/Documents/Research/Elowitz Lab/motifs/scripts/preprocessing/Processing_Pathbank.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/preprocessing/Integration_Nowotschin.R")
warnings()
library(Seurat)
library(stringr)
# Matrix of size 27998 x 92649
data_dir <- "./data/raw_data/sc_data/gastrulation/"
sample_files <- list.files(path=data_dir,
pattern = "GSE")
meta_files <- list.files(path=data_dir,
pattern = "metadata")
# format is in 10x readable folders
matrix_list = list()
for( i in 1:length(sample_files))
matrix_list[[i]] = Read10X(paste(data_dir,
sample_files[i],
sep=""))
# Split a multi-page Excel file with different timepoints.
sample_id = str_split(sample_files,
'_',
simplify=T)[,3]
# Read all csvs and save correct cell_id
# Cell column names will carry BC + sample id + stage
meta_list = list()
for(i in 1:length(meta_files)){
meta_list[[i]] = read.csv(paste(data_dir,
meta_files[i],
sep=''),
header = T)
meta_list[[i]]$sample = sample_id[i]
# define cell_id as BC + sample_id
meta_list[[i]] <- meta_list[[i]] %>%
mutate(cell_id = paste(BC,
sample,
sep="_"))
}
# Merge all metadata files
meta_df = do.call(rbind,
meta_list)
# Rename cells in matrix with BC + sample id + stage format
sample_id = str_split(sample_files,
'_',
simplify  = T)[,3]
for(i in 1:length(matrix_list))
colnames(matrix_list[[i]]) <- paste(colnames(matrix_list[[i]]),
sample_id[i],
sep="_")
# Merge all matrices
# All have the same number of genes so we can directly merge
master_matrix = do.call(cbind,
matrix_list)
# Make filter for Seurat
which_cells = colnames(master_matrix)[which(colnames(master_matrix) %in%
meta_df$cell_id)]
master_matrix = master_matrix[,which_cells]
meta_df %>%
filter(cell_id %in% which_cells) -> meta_df
row.names(meta_df)<- meta_df$cell_id
# Seurat
row.names(meta_df) <- meta_df$cell_id
tiss.embryo = CreateSeuratObject(counts = master_matrix,
min.cells = 2,
min.features = 800,
meta.data = meta_df)
tiss.embryo = PercentageFeatureSet(tiss.embryo,
pattern = '^MT-',
col.name = 'percent.mt')
tiss.embryo <- tiss.embryo %>%
SCTransform() %>%
RunPCA() %>%
RunUMAP(dims = 1:30) %>%
FindNeighbors() %>%
FindClusters(resolution = 1.2)
master_seurat <- readRDS("data/processed_data/master_seurat.RDS")
master_seurat@meta.data$dataset %>% unique()
master_seurat@meta.data %>% colnames()
master_seurat@meta.data %>% filter(dataset == "E6.5_8.5_Chan") %>% length()
tiss.embryo$SCT_snn_res.1.2 %>% unique()
tiss.embryo$seurat_clusters %>% unique()
tiss.embryo %>% group_by(seurat_clusters) %>% count()
tiss.embryo@meta.data %>% group_by(seurat_clusters) %>% count()
tiss.embryo@meta.data %>% group_by(seurat_clusters) %>% count() %>% filter(n > 30)
tiss.embryo@meta.data %>% group_by(seurat_clusters) %>% count() %>% data.frame()
tiss.embryo@meta.data %>% colnames()
tiss.embryo@meta.data %>% group_by(Cell.state) %>% count() %>% filter(n > 30)
tiss.embryo@meta.data %>% head()
meta_df %>% head()
library(Seurat)
library(dplyr)
library(Matrix)
tabula.path ="./data/raw_data/sc_data/tms_FACS/"
FACS_files = list.files(paste(tabula.path,"FACS" ,sep=""), full.names = TRUE)
raw.data.list = list()
for (file in FACS_files){
#read each file (csv count matrices sorted by tissue)
raw.data <- read.csv(file, row.names = 1)
raw.data <- Matrix(as.matrix(raw.data), sparse = TRUE)
raw.data.list <- append(raw.data.list, raw.data)
}
dim(raw.data.list[[2]])
raw.data <- do.call(cbind, raw.data.list)
cell_order_FACS <- order(colnames(raw.data))
raw.data = raw.data[,cell_order_FACS]
meta.data <- read.csv(paste(tabula.path,"/metadata_FACS.csv",sep=""))
plates <- str_split(colnames(raw.data),"[.]", simplify = TRUE)[,2]
library(stringr)
plates <- str_split(colnames(raw.data),"[.]", simplify = TRUE)[,2]
rownames(meta.data) <- meta.data$plate.barcode
cell.meta.data <- meta.data[plates,]
rownames(cell.meta.data) <- colnames(raw.data) #lets rename the rows with the cell.ID
erccs <- grep(pattern = "^ERCC-", x = rownames(x = raw.data), value = TRUE)
percent.ercc <- Matrix::colSums(raw.data[erccs, ])/Matrix::colSums(raw.data)
sum.ercc<-Matrix::colSums(raw.data[erccs, ])
ercc.index <- grep(pattern = "^ERCC-", x = rownames(x = raw.data), value = FALSE)
raw.data <- raw.data[-ercc.index,] #remove the ERCC sequences
raw.data = raw.data[,percent.ercc<0.15] #Here is were the distribution seems to change
high.count.cells = Matrix::colSums(raw.data)>50000 #recommendation for quality control (Sisi)
raw.data  = raw.data[,high.count.cells]
total.reads = Matrix::colSums(raw.data)
tiss <- CreateSeuratObject(raw.data = raw.data)
tiss <- AddMetaData(object = tiss, cell.meta.data)
tiss <- AddMetaData(object = tiss, percent.ercc, col.name = "percent.ercc")
tiss<- AddMetaData(object = tiss, total.reads,col.name = 'total.reads')
tiss <- CreateSeuratObject(counts = raw.data)
tiss <- AddMetaData(object = tiss, cell.meta.data)
tiss <- AddMetaData(object = tiss, percent.ercc, col.name = "percent.ercc")
tiss<- AddMetaData(object = tiss, total.reads,col.name = 'total.reads')
colnames(tiss@meta.data)[colnames(tiss@meta.data) == 'nUMI'] <- 'nReads' # this is not UMI data so Seurat calculates only the number of reads
tiss
library(Seurat)
library(dplyr)
library(Matrix)
library(stringr)
tabula.path ="./data/raw_data/sc_data/tms_FACS/"
FACS_files = list.files(paste(tabula.path,"FACS" ,sep=""), full.names = TRUE)
raw.data.list = list()
for (file in FACS_files){
#read each file (csv count matrices sorted by tissue)
raw.data <- read.csv(file, row.names = 1)
raw.data <- Matrix(as.matrix(raw.data), sparse = TRUE)
raw.data.list <- append(raw.data.list, raw.data)
}
dim(raw.data.list[[2]])
raw.data <- do.call(cbind, raw.data.list)
dim(raw.data)
raw.data.copy <- raw.data
## what are the dims?
cell_order_FACS <- order(colnames(raw.data))
raw.data = raw.data[,cell_order_FACS]
meta.data <- read.csv(paste(tabula.path,"/metadata_FACS.csv",sep=""))
plates <- str_split(colnames(raw.data),"[.]", simplify = TRUE)[,2]
rownames(meta.data) <- meta.data$plate.barcode
cell.meta.data <- meta.data[plates,]
rownames(cell.meta.data) <- colnames(raw.data) #lets rename the rows with the cell.ID
erccs <- grep(pattern = "^ERCC-", x = rownames(x = raw.data), value = TRUE)
percent.ercc <- Matrix::colSums(raw.data[erccs, ])/Matrix::colSums(raw.data)
sum.ercc<-Matrix::colSums(raw.data[erccs, ])
ercc.index <- grep(pattern = "^ERCC-", x = rownames(x = raw.data), value = FALSE)
raw.data <- raw.data[-ercc.index,] #remove the ERCC sequences
raw.data = raw.data[,percent.ercc<0.15] #Here is were the distribution seems to change
tiss <- CreateSeuratObject(counts = raw.data)
tiss
tiss <- CreateSeuratObject(counts = raw.data.copy)
tiss
tiss <- AddMetaData(object = tiss, cell.meta.data)
tiss <- AddMetaData(object = tiss, percent.ercc, col.name = "percent.ercc")
tiss<- AddMetaData(object = tiss, total.reads,col.name = 'total.reads')
source("~/.active-rstudio-document")
tiss <- CreateSeuratObject(counts = raw.data)
tiss
tiss <- AddMetaData(object = tiss, cell.meta.data)
tiss <- AddMetaData(object = tiss, percent.ercc, col.name = "percent.ercc")
tiss<- AddMetaData(object = tiss, total.reads,col.name = 'total.reads')
total.reads = Matrix::colSums(raw.data)
tiss <- CreateSeuratObject(counts = raw.data)
tiss <- AddMetaData(object = tiss, cell.meta.data)
tiss <- AddMetaData(object = tiss, percent.ercc, col.name = "percent.ercc")
tiss<- AddMetaData(object = tiss, total.reads,col.name = 'total.reads')
total.reads = Matrix::colSums(raw.data)
tiss <- CreateSeuratObject(counts = raw.data)
tiss <- AddMetaData(object = tiss, cell.meta.data)
tiss <- AddMetaData(object = tiss, percent.ercc, col.name = "percent.ercc")
tiss<- AddMetaData(object = tiss, total.reads,col.name = 'total.reads')
#all of these percentages are for EACH cell
percent.Rn45s <- tiss@raw.data['Rn45s', ]/Matrix::colSums(tiss@raw.data)
tiss <- AddMetaData(object = tiss, metadata = percent.Rn45s, col.name = "percent.Rn45s")
GenePlot(object = tiss, gene1 = "nReads", gene2 = "nGene", use.raw=T)
FeatureScatter(object = tiss, feature1 = "nReads", feature2 = "nGene", use.raw=T)
FeatureScatter(object = tiss, feature1 = "nReads", feature2 = "nGene")
tiss
colnames(tiss@meta.data)[colnames(tiss@meta.data) == 'nUMI'] <- 'nReads' # this is not UMI data so Seurat calculates only the number of reads
tiss
tiss@meta.data %>% colnames
FeatureScatter(object = tiss, feature1 = "nReads", feature2 = "nGene")
tiss <- CreateSeuratObject(counts = raw.data)
tiss <- AddMetaData(object = tiss, cell.meta.data)
tiss <- AddMetaData(object = tiss, percent.ercc, col.name = "percent.ercc")
tiss<- AddMetaData(object = tiss, total.reads,col.name = 'total.reads')
colnames(tiss@meta.data)[colnames(tiss@meta.data) == 'nUMI'] <- 'nReads' # this is not UMI data so Seurat calculates only the number of reads
FeatureScatter(object = tiss, feature1 = "nReads", feature2 = "nGene")
tiss <- CreateSeuratObject(counts = raw.data, assay = "RNA")
tiss <- AddMetaData(object = tiss, cell.meta.data)
tiss <- AddMetaData(object = tiss, percent.ercc, col.name = "percent.ercc")
tiss<- AddMetaData(object = tiss, total.reads,col.name = 'total.reads')
colnames(tiss@meta.data)[colnames(tiss@meta.data) == 'nUMI'] <- 'nReads' # this is not UMI data so Seurat calculates only the number of reads
tiss
tiss@meta.data
tiss@meta.data %>% colnames()
tiss <- CreateSeuratObject(counts = raw.data, assay = "RNA", min.cells = 0, min.genes = 0)
tiss <- AddMetaData(object = tiss, cell.meta.data)
tiss <- AddMetaData(object = tiss, percent.ercc, col.name = "percent.ercc")
tiss<- AddMetaData(object = tiss, total.reads,col.name = 'total.reads')
colnames(tiss@meta.data)[colnames(tiss@meta.data) == 'nUMI'] <- 'nReads' # this is not UMI data so Seurat calculates only the number of reads
tiss
tiss@meta.data %>% colnames()
FeatureScatter(object = tiss, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
head(meta.data)
tiss
source("./scripts/analysis/imports.R")
# Specify pathway name (as saved in pathway_df) and get genes.
pathway_name =  'Tgf-beta family receptors'
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
# Thresholds for processing data.
min_genes_pathway = 2 # tgfb min. number of genes expressed
min_expr_threshold = 0.2 # tgfb minimum expression threshold for gene to be on
diverse_quantile = 0.9
sat_val = 0.99
seurat_obj = master_seurat
data_frame_main <- normalizedDevel(pathway_genes = pathway_genes,
sat_val = sat_val,
seurat_obj = seurat_obj,
fill_zero_rows = T
)
dim(data_frame_main)
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
optimal_k_pathway = 30
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
pipe_run$matrix %>% dim()
pipe_run$data_frame %>% dim()
quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)$data_frame
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_2C_3_4BCDE_S2ABC_S3D.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_S4A.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_S4A.R")
strsplit("hi_silh_plt_abc", "_silh_plt")
strsplit("hi_silh_plt_abc", "_silh_plt")[[1]]
strsplit("hi_silh_plt_abc", "_silh_plt")[1
]
strsplit("hi_silh_plt_abc", "_silh_plt")[[1]][1]
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_S4A.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_S4A.R")
saved_files
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_S4A.R")
dispersion_stats <- parseDispersion(pathway_list_dispersion = pathway_list_dispersion[2:length(pathway_list_dispersion)],
dispersion_dir = dispersion_dir)
# 3. Master data.frame
res = plot_dispersion_distribution(dispersion_stats,
labels_idx = c(9,10,12,13,14,1,3),
min_silh = 0.3,
min_n_cluster = 2,
df_kvals = df_kvals,
use_mean = F,
include_metabolic = F,
use_palette = 'Paired')
res[[1]] +
theme(text = element_text(size = 20)) +
ylab('N clusters / n genes') +
xlab('Dispersion')
master_df <- res[[2]] # will now include all the summary statistics for all pathways
master_df <- master_df %>% mutate(short_label = str_trunc(pathway_name, 10))
fig5_scatter(master_df = master_df, max_width = 0.35)
ggsave(paste(fig_dir, "Figure_5C.pdf", sep=""))
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_S4A_Revise.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Supplementary_File_4.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Supplementary_File_4.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Supplementary_File_4.R")
silh_res_dir
pathway_list_dispersion
pathway_list_dispersion[[1]]
fig_5_df[fig_5_df$width<0.35]
fig_5_df[fig_5_df$width<0.35,]
for (i in pathway_list_dispersion[[2]]){
if (fig_5_df$width[fig_5_df$pathway_name == i] < 0.35){
optimal_k_pathway = fig_5_df$k[fig_5_df$pathway_name == i]
generatePlots(seurat_obj = seurat_obj,
pathway_name = i,
pathway_df = pathway_df,
optimal_k_pathway = optimal_k_pathway,
min_genes_pathway = min_genes_pathway,
min_expr_threshold = min_expr_threshold,
diverse_quantile = diverse_quantile,
silh_res_dir = silh_res_dir)
}
}
for (i in pathway_list_dispersion){
if (fig_5_df$width[fig_5_df$pathway_name == i] < 0.35){
optimal_k_pathway = fig_5_df$k[fig_5_df$pathway_name == i]
generatePlots(seurat_obj = seurat_obj,
pathway_name = i,
pathway_df = pathway_df,
optimal_k_pathway = optimal_k_pathway,
min_genes_pathway = min_genes_pathway,
min_expr_threshold = min_expr_threshold,
diverse_quantile = diverse_quantile,
silh_res_dir = silh_res_dir)
}
}
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_6C.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_6C.R")
