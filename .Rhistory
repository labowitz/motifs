n_pcs = 100, # how many PCs to use
manual_embedding = pca_proj, # PCA embedding for diversity
dist_metric = "euclidean"
)
ecdf_plot = ecdf_diversity(control_res)
rank_plot <- rank_diversity(pathway_genes = pathway_genes,
min_genes_on = min_genes_pathway,
dist_metric = "euclidean",
make_plot = T,
k_final = optimal_k_pathway,
min_expr = min_expr_threshold,
manual_embedding = pca_proj,
seurat_obj = seurat_obj
)
motif_heat <- motif_heatmap(control_res = control_res,
pathway_genes = pathway_genes,
diverse_quantile = diverse_quantile,
type="motif"
)
motif_ct <- motif_ct_heatmap(control_res = control_res,
pathway_genes = pathway_genes,
diverse_quantile = diverse_quantile,
type="motif"
)
g_umap <- global_umap(control_res = control_res,
seurat_obj = seurat_obj,
use_pca = T,
n_pcs = 1:20,
clust_method = "ward.D2",
dist_metric = "cosine")
p_umap <- motifs_umap(control_res = control_res,
pathway_genes = pathway_genes,
seurat_obj = seurat_obj,
glasbey_use = F,
use_pca = T,
n_pcs = 1:20,
clust_method = "ward.D2",
dist_metric = "cosine",
ncol = 6,
text_size = 10,
diverse_quantile = diverse_quantile)
coexp_heat <- coexpHeatmap(seurat_obj = seurat_obj,
pathway_genes = pathway_genes,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold)
split_pathway_genes = split(pathway_genes,
cut(seq_along(pathway_genes),
3,
labels = FALSE))
grobs = list(textGrob(paste("\n",
paste(split_pathway_genes$`1`,
collapse="\n"),
sep=""),
just = "center",
gp=gpar(fontsize=10)),
textGrob(paste("Pathway genes\n",
paste(split_pathway_genes$`2`,
collapse="\n"),
sep=""),
just = "center",
gp=gpar(fontsize=10)),
textGrob(paste("\n",
paste(split_pathway_genes$`3`,
collapse="\n"),
sep=""),
just = "center",
gp=gpar(fontsize=10)),
coexp_heat +
theme(plot.margin = unit(c(0,0,0,2), "cm")),
as.ggplot(pipe_run$plot),
silh_z_plt[[1]] +
geom_vline(xintercept = which.max(silh_z_plt[[2]]),
linetype = "dashed")  +
theme(axis.title = element_text(size=16),
plot.title = element_text(size=20),
axis.text = element_text(size=14)),
g_umap +
theme(plot.title = element_text(size=20),
plot.margin = unit(c(0,1,1.5,0), "cm")),
ecdf_plot +
theme(axis.title = element_text(size=16),
plot.title = element_text(size=20),
axis.text = element_text(size=14),
legend.text = element_text(size=10),
legend.title = element_text(size=12),
plot.margin = unit(c(0,1,0,0), "cm")),
rank_plot +
theme(axis.title = element_text(size=16),
plot.title = element_text(size=20),
axis.text = element_text(size=14),
plot.margin = unit(c(0,1,0,0), "cm")),
as.ggplot(motif_heat$plot) +
ggtitle(label=bquote("Motifs, Dispersion" ~ phantom() >= .(100 * diverse_quantile)^{th} ~ "percentile")) +
theme(plot.title = element_text(size=20)),
motif_ct +
theme(plot.margin = unit(c(2,0,0,0), "cm")) +
ggtitle("Motif Tissue Composition") +
theme(plot.title = element_text(size=20))
)
lay = rbind(c(1,2,3,6,6,6,5,5),
c(4,4,4,6,6,6,5,5),
c(4,4,4,6,6,6,5,5),
c(7,7,8,8,9,9,5,5),
c(7,7,8,8,9,9,5,5),
c(10,10,10,11,11,11,5,5),
c(10,10,10,11,11,11,5,5),
c(10,10,10,11,11,11,5,5),
c(10,10,10,NA,NA,NA,5,5))
ml <- m.grid.arrange(p1 = grobs,
lay1 = lay,
p2 = p_umap,
k_final = optimal_k_pathway,
pathway_name = pathway_name
)
ggsave(filename = paste(silh_res_dir, pathway_name, ".pdf", sep=""), plot = ml, width = 17, height = 22)
write.csv(x = control_res$profiles %>% select(cell_id, class_label),
file = paste(silh_res_dir, pathway_name, "_profiles.csv", sep=""))
}
seurat_obj = master_seurat
pathway_name = "RNA-splicing by SR protein family"
min_genes_pathway = 2
min_expr_threshold = 0.3
diverse_quantile = 0.9
pathway_name = "Bmp"
optimal_k_pathway <- perc_k_finder(z_score = silh_res[[2]])
silh_res[[2]]
silhouette_zscore(silh_result = silh_res,
min_expression = min_expr,
pathway_name = pathway_name,
min.y = -0.05,
max.y = 0.55
)
silhouette_zscore(silh_result = silh_res,
min_expr = min_expr,
min.y = -0.05,
max.y = 0.55
)
silh_z_plt <- silhouette_zscore(silh_result = silh_result,
min_expr = min_expr,
x_offset = 6,
max.y = 0.5,
min.y = -0.05,
k_max = silh_result[[2]]$k %>%
max()
)
silh_z_plt <- silhouette_zscore(silh_result = silh_res,
min_expr = min_expr,
x_offset = 6,
max.y = 0.5,
min.y = -0.05,
k_max = silh_res[[2]]$k %>%
max()
)
optimal_k_pathway <- perc_k_finder(z_score = silh_z_plt[[2]])
optimal_k_pathway
min_expr
silh_z_plt
generatePlots(seurat_obj = seurat_obj,
pathway_name = pathway_name,
pathway_df = pathway_df,
optimal_k_pathway = optimal_k_pathway,
min_genes_pathway = 2,
min_expr_threshold = 0.3,
diverse_quantile = 0.9,
silh_res_dir = "scripts/figures/peak_analysis/silhouette_res/silh_rds/")
library(ggplotify)
generatePlots(seurat_obj = seurat_obj,
pathway_name = pathway_name,
pathway_df = pathway_df,
optimal_k_pathway = optimal_k_pathway,
min_genes_pathway = 2,
min_expr_threshold = 0.3,
diverse_quantile = 0.9,
silh_res_dir = "scripts/figures/peak_analysis/silhouette_res/silh_rds/")
pathway_df %>% filter(pathway=="Wnt_l")
pathway_name = "Wnt_l"
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df)
silhouettePlot(pathway_genes = pathway_genes,
min_genes_on = min_genes_on,
min_expr = min_expr,
n_bootstraps = 100,
seurat_obj = seurat_obj,
max_k = max_k) -> silh_res
saveRDS(silh_res, paste("scripts/figures/peak_analysis/silhouette_res/silh_rds/", "Wnt_l_silh_plt_ale.RDS", sep = ""))
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_6D.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_6D.R")
tgfb_niv
bmpr_niv
read.csv(tgfb_niv)
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_6D.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_6D.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_6D.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_6D.R")
master_seurat@meta.data %>% select(Tissue) %>% unique()
master_seurat@meta.data %>% filter(Tissue == "intestine") <- "Intestine"
master_seurat@meta.data$Tissue[master_seurat@meta.data$Tissue == "intestine"]
master_seurat@meta.data$Tissue[master_seurat@meta.data$Tissue == "intestine"] <- "dev. intestine"
source("./scripts/analysis/imports_new.R")
## Change these variables
filename = "eph_trial" # how name is appended to files for pathway
## Directories for the files
output_dir = paste("./scripts/analysis/outputs/", filename, "_analysis/", filename, sep = "")
fig_dir = "./scripts/figures/eph_trial/"
pathway_df = readRDS("./data/processed_data/all_pathways.RDS")
pathway_df$pathway[all_pathways$pathway=='Eph_r'] <- 'Eph-Ephrin'
pathway_df$pathway[all_pathways$pathway=='Eph_l'] <- 'Eph-Ephrin'
pathway_name =  "Eph-Ephrin" # eph pathway name
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df)
min_genes_pathway = 2 # eph min. number of genes expressed
min_expr_threshold = 0.3 # eph minimum expression threshold for gene to be on
optimal_k_pathway = 54 # optimal pathway components, computed from z-score
diverse_quantile = 0.9
## Running fullControlPathway
control_res  = fullControlPathway(pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
seurat_obj = master_seurat, # seurat object
null_list = hvg_genes, #list of highly variable genes
n_samples = 100,
filter_manual = T,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold,
n_pcs = 100, # how many PCs to use
manual_embedding = pca_proj, # PCA embedding for diversity
dist_metric = "euclidean"
)
## Running fullControlPathway
control_res  = fullControlPathway(pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
seurat_obj = master_seurat, # seurat object
n_samples = 100,
filter_manual = T,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold,
n_pcs = 100, # how many PCs to use
manual_embedding = pca_proj, # PCA embedding for diversity
dist_metric = "euclidean"
)
pathway_name =  "Eph-Ephrin" # eph pathway name
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df)
min_genes_pathway = 2 # eph min. number of genes expressed
min_expr_threshold = 0.3 # eph minimum expression threshold for gene to be on
optimal_k_pathway = 54 # optimal pathway components, computed from z-score
diverse_quantile = 0.9
pathway_df = readRDS("./data/processed_data/all_pathways.RDS")
pathway_df = readRDS("./data/processed_data/all_pathways.RDS")
pathway_df$pathway[all_pathways$pathway=='Eph_r'] <- 'Eph-Ephrin'
pathway_df$pathway[all_pathways$pathway=='Eph_l'] <- 'Eph-Ephrin'
pathway_name =  "Eph-Ephrin" # eph pathway name
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df)
pathway_df = readRDS("./data/processed_data/all_pathways.RDS")
pathway_name =  "Bmp_Tgfb" # tgfb pathway name
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df)
min_genes_pathway = 2 # tgfb min. number of genes expressed
min_expr_threshold = 0.2 # tgfb minimum expression threshold for gene to be on
optimal_k_pathway = 30 # optimal pathway components, computed from z-score
diverse_quantile = 0.9
## Running fullControlPathway
control_res  = fullControlPathway(pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
seurat_obj = master_seurat, # seurat object
n_samples = 100,
filter_manual = T,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold,
n_pcs = 100, # how many PCs to use
manual_embedding = pca_proj, # PCA embedding for diversity
dist_metric = "euclidean"
)
type="motif"
div_res <- diverseFilt(control_res = control_res,
pathway_genes = pathway_genes,
diverse_quantile = diverse_quantile,
type=type
)
# 6. Tissue and organ distributions of selected profiles
div_res$diverse_df %>%
dplyr::filter(class_label %in% row.names(div_res$diverse_mat) ) %>%
dplyr::select(Tissue, class_label) %>%
dplyr::filter(!Tissue %in% c('mat','endoderm')) %>%
group_by(class_label,Tissue) %>%
count  %>%
pivot_wider(id_cols=class_label,
names_from = Tissue,
values_from = n,
values_fill = 0) -> tissue_distribution
x = tissue_distribution %>%
ungroup %>%
dplyr::select(-class_label) %>%
as.matrix()
row.names(x) <- tissue_distribution$class_label
# make tissue names pretty
colnames(x)<-str_replace(string = colnames(x),pattern ="_",replacement = ' ') %>% firstup()
x <- x[,sort(colnames(x))]
data.frame(x) %>%
rownames_to_column("profiles") %>%
gather("tissues", values, -profiles) -> x
x$values <- sqrt(x$values)
x
help(mclapply   )
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Silhouette_PathBank.R")
unique(pathway_df$pathway)[1:2]
mclapply(unique(pathway_df$pathway)[1:2], # List of pathways
FUN = runSilhBoot,
min_genes_on=min_genes_on,
min_expr=min_expr,
seurat_obj = seurat_obj,
max_k = 20,
output_dir = output_dir,
mc.cores = 8)
pathway_df$pathway
unique(pathway_df$pathway[20:30])
unique(pathway_df$pathway[20:30]) %>% length()
unique(pathway_df$pathway) %>% length()
unique(pathway_df$pathway)[71:73]
genesPathway(pathway_name = "Wnt_l", pathway_df = pathway_df)
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Silhouette_PathBank.R")
mclapply(unique(pathway_df$pathway)[71:73], # List of pathways
FUN = runSilhBoot,
min_genes_on=min_genes_on,
pathway_df,
min_expr=min_expr,
seurat_obj = seurat_obj,
max_k = 20,
output_dir = output_dir,
mc.cores = 8)  -> result
result
Wnt_l_silh_plt <- readRDS("~/Documents/Research/Elowitz Lab/motifs/data/processed_data/Silhouette_PathBank/Wnt_l_silh_plt.RDS")
Wnt_l_silh_plt[[1]]
Wnt_l_silh_plt[[1]]
Bmp_down_silh_plt <- readRDS("~/Documents/Research/Elowitz Lab/motifs/data/processed_data/Silhouette_PathBank/Bmp_down_silh_plt.RDS")
Bmp_down_silh_plt
source("./scripts/analysis/imports_new.R")
source("./scripts/analysis/Functions_Figure_5.R") # Script with Fig. 5 functions
#silh_res_dir = "data/processed_data/Silhouette_PathBank/"
#dispersion_dir = "data/processed_data/Dispersion_PathBank/"
silh_res_dir = "scripts/figures/peak_analysis/silhouette_res/silh_rds/"
dispersion_dir = "scripts/figures/peak_analysis/dispersion/"
source("./scripts/analysis/imports_new.R")
source("./scripts/analysis/Functions_Figure_5.R") # Script with Fig. 5 functions
#silh_res_dir = "data/processed_data/Silhouette_PathBank/"
#dispersion_dir = "data/processed_data/Dispersion_PathBank/"
silh_res_dir = "scripts/figures/peak_analysis/silhouette_res/silh_rds/"
dispersion_dir = "scripts/figures/peak_analysis/dispersion/"
# Parameters to show
min_expr_threshold <- 0.3
min_genes_pathway <- 2
# Import data -- lists of genes
pathway_df <- read.table("./data/raw_data/allPathways_listGenes_dec2021.tsv",
header = T,
sep = "\t")
# Correct pathway names
pathway_df$pathway[pathway_df$pathway=='Notch'] <- 'Notch receptors, Dll ligands and Fringe proteins'
pathway_df$pathway[pathway_df$pathway=='Bmp_Tgfb'] <- 'Tgf-beta family receptors'
pathway_df$pathway[pathway_df$pathway=='Srsf'] <- 'RNA-splicing by SR protein family'
pathway_df$pathway[pathway_df$pathway=='Eph_r'] <- 'Eph A-B receptors'
pathway_df$pathway[pathway_df$pathway=='Wnt'] <- 'Frizzled and Lrp5 6 receptors for Wnt B Catenin Signaling'
pathway_df$pathway[pathway_df$pathway=='Fgfr'] <- 'FGF cell signaling proteins'
# Add a combined version of Eph ligands + receptors
pathway_df <- rbind(pathway_df, data.frame(pathway = 'Eph receptors and ligands',
gene = pathway_df %>%
dplyr::filter(grepl(pattern = 'Eph', pathway)) %>%
dplyr::pull(gene)))
# fix the names of some pathways
pathway_df$pathway <- pathway_df$pathway %>% str_replace('/', ' ')
pathway_df$pathway <- pathway_df$pathway %>% str_replace('\\(', ' ')
pathway_df$pathway <- pathway_df$pathway %>% str_replace('\\)', ' ')
#pathway_df$pathway <- pathway_df$pathway %>% str_replace('-', ' ')
#pathway_df$pathway <- pathway_df$pathway %>% str_replace('–', ' ')
pathway_df$pathway <- pathway_df$pathway %>% str_replace('–', '-')
fig_5_df <- read.csv("scripts/figures/peak_analysis/silhouette_res/dispersion_states_figure5.csv")
#fig_5_df$pathway_name <- fig_5_df$pathway_name %>% str_replace('-', ' ')
pathway_df <- pathway_df[pathway_df$pathway %in% fig_5_df$pathway_name,]
## Save pathway data.frame
saved_files <- paste(silh_res_dir,
list.files(path=silh_res_dir,
pattern = "_ale.RDS"),
sep ="") # ale is my personal ID
# if the pathway finished and the file was saved correctly:
full_pathway_list <- pathway_df %>%
group_by(pathway) %>%
count %>%
as.data.frame %>%
dplyr::filter(n>7) %>%
pull(pathway)
saved_idx <- lapply(full_pathway_list,
FUN = function(x) sum(grepl(x, saved_files))) %>%
unlist %>%
as.logical
# load only the pathways that actually finished
pathway_list_dispersion <- full_pathway_list[saved_idx]
## Saved silhouette scores
silh_files <- paste(silh_res_dir,
list.files(path = silh_res_dir,
pattern = ".RDS"),
sep ="")
silh_files
df_kvals <- peak_width_scores(use_percentile = 0.95,
smooth_window = 3,
pct_opt = 0.9,
peak_threshold = 0.1,
silh_res_dir = silh_res_dir)
silh_files
peak_width_scores <- function(use_percentile = 0.95, # threshold for considering values within the peak range (% of max z-score)
smooth_window = 3,     # filtering window size for smoothing the z-score data before finding the max value.
pct_opt = 0.9,         # will be deprecated!!: : percentile of max z-score that will be used to identify the optimal k - this can be different from the above percentile
peak_threshold = 0.1,  # relative distance from the max to consider a k value within the peak
silh_files = c(),
silh_res_dir = "",
min_expr = 0.2
){
pathway_list = lapply(silh_files,
FUN = function(x) strsplit(x, "_ale.RDS")[[1]]) %>% unlist()
# prepare the data frame for pathways with output
df_kvals = data.frame(name = pathway_list,
k = rep(0, length(pathway_list)),
width = rep(0, length(pathway_list)))
# Read output from all pathwways and run the pipeline using
# the optimal number of clusters found above
for (i in 1:length(silh_files)){
silh_result = readRDS(paste(silh_res_dir,
silh_files[[i]],
sep=""))
res = silhouette_zscore(silh_result = silh_result,
min_expr = min_expr,
x_offset = 6,
min.y = -0.1,
max.y = 0.6,
k_max = silh_result[[2]]$k %>% max()
)
pdf(paste(silh_res_dir,
pathway_list[[i]],
'_silhPeak.pdf',
sep = ""))
# Computes the peak width
peak_width_list  <- plot_peakedness_score(z_score_raw = res[[2]],
pathway_name = pathway_list[[i]],
fil_win = smooth_window,
percentile = use_percentile,
peak_width_threshold = peak_threshold)
dev.off()
df_kvals$k[[i]] = perc_k_finder(z_score = res[[2]],
percentile = pct_opt)  # 0.9 is the default value --- used in the manuscript
df_kvals$width[[i]] <- peak_width_list[[1]]
df_kvals$min_k_peak[i] <- peak_width_list[[2]]
df_kvals$max_k_peak[i] <- peak_width_list[[3]]
}
return(df_kvals)
}
df_kvals <- peak_width_scores(use_percentile = 0.95,
smooth_window = 3,
pct_opt = 0.9,
peak_threshold = 0.1,
silh_res_dir = silh_res_dir)
df_kvals <- peak_width_scores(use_percentile = 0.95,
smooth_window = 3,
pct_opt = 0.9,
peak_threshold = 0.1,
silh_res_dir = silh_res_dir,
silh_files = silh_files,
min_expr = min_expr)
pathway_list_dispersion
lapply(silh_files,
FUN = function(x) strsplit(x, "_ale.RDS")[[1]])
silh_files <- list.files(path = silh_res_dir,
pattern = ".RDS")
df_kvals <- peak_width_scores(use_percentile = 0.95,
smooth_window = 3,
pct_opt = 0.9,
peak_threshold = 0.1,
silh_res_dir = silh_res_dir,
silh_files = silh_files,
min_expr = min_expr)
df_kvals <- peak_width_scores(use_percentile = 0.95,
smooth_window = 3,
pct_opt = 0.9,
peak_threshold = 0.1,
silh_res_dir = silh_res_dir,
silh_files = silh_files,
min_expr = min_expr)
silh_files <- list.files(path = silh_res_dir,
pattern = "_ale.RDS")
silh_files
df_kvals <- peak_width_scores(use_percentile = 0.95,
smooth_window = 3,
pct_opt = 0.9,
peak_threshold = 0.1,
silh_res_dir = silh_res_dir,
silh_files = silh_files,
min_expr = min_expr)
df_kvals
## Running code
df_kvals$width %>% hist(breaks = 20 ,
col = 'lightgray',
border = 'black',
xlab = 'Width',
main = "Peak sharpness",
prob = T)
silh_files
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_S3B_Revise.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_S3B_Revise.R")
pathway_df
pathway_df$pathway[pathway_df$pathway == "Bmp_Tgfb"]
pathway_df$pathway[pathway_df$pathway %>% str_detect("Bmp")]
pathway_df$pathway[pathway_df$pathway %>% str_detect("rece")]
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_S3B_Revise.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_S3B_Revise.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_S3B_Revise.R")
