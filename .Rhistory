column.title = "Pathway genes",
bottom.label.size = 0.3,
grid.hline.col = "white",
grid.hline.size = 2,
legend.breaks = seq(0,1,length.out=11)
)
return(motif_heat)
}
motif_heat <- motif_heatmap(control_res = control_res,
pathway_genes = pathway_genes,
diverse_quantile = diverse_quantile,
type="motif"
)
motif_heatmap <- function(control_res=data.frame(),
pathway_genes=c(),
diverse_quantile=0.90,
type="motif"
){
div_res <- diverseFilt(control_res = control_res,
pathway_genes = pathway_genes,
diverse_quantile = diverse_quantile,
type=type
)
motif_heat <- superheat(div_res$diverse_mat[,pathway_genes],
pretty.order.rows = T,
heat.pal = blackPal(11),
bottom.label.text.angle = 90,
yr = sqrt(div_res$diverse_mat$cell_types),
yr.plot.type='bar',
yr.axis.name = "sqrt(No.\n cell types)",
row.title = "Pathway motifs",
column.title = "Pathway genes",
bottom.label.size = 0.3,
grid.hline.col = "white",
grid.hline.size = 2
)
return(motif_heat)
}
motif_heat <- motif_heatmap(control_res = control_res,
pathway_genes = pathway_genes,
diverse_quantile = diverse_quantile,
type="motif"
)
legend.breaks = seq(0,1,length.out=11)
blackPall(11)
blackPal(11)
scales::show_col(blackPal(11))
motif_heatmap <- function(control_res=data.frame(),
pathway_genes=c(),
diverse_quantile=0.90,
type="motif"
){
div_res <- diverseFilt(control_res = control_res,
pathway_genes = pathway_genes,
diverse_quantile = diverse_quantile,
type=type
)
motif_heat <- superheat(div_res$diverse_mat[,pathway_genes],
pretty.order.rows = T,
heat.pal = blackPal(11),
bottom.label.text.angle = 90,
yr = sqrt(div_res$diverse_mat$cell_types),
yr.plot.type='bar',
yr.axis.name = "sqrt(No.\n cell types)",
row.title = "Pathway motifs",
column.title = "Pathway genes",
bottom.label.size = 0.3,
grid.hline.col = "white",
grid.hline.size = 2,
scale=TRUE,
)
return(motif_heat)
}
motif_heatmap <- function(control_res=data.frame(),
pathway_genes=c(),
diverse_quantile=0.90,
type="motif"
){
div_res <- diverseFilt(control_res = control_res,
pathway_genes = pathway_genes,
diverse_quantile = diverse_quantile,
type=type
)
motif_heat <- superheat(div_res$diverse_mat[,pathway_genes],
pretty.order.rows = T,
heat.pal = blackPal(11),
bottom.label.text.angle = 90,
yr = sqrt(div_res$diverse_mat$cell_types),
yr.plot.type='bar',
yr.axis.name = "sqrt(No.\n cell types)",
row.title = "Pathway motifs",
column.title = "Pathway genes",
bottom.label.size = 0.3,
grid.hline.col = "white",
grid.hline.size = 2,
scale=TRUE,
legend.breaks=seq(0,1,length.out=11)
)
return(motif_heat)
}
motif_heat <- motif_heatmap(control_res = control_res,
pathway_genes = pathway_genes,
diverse_quantile = diverse_quantile,
type="motif"
)
motif_heatmap <- function(control_res=data.frame(),
pathway_genes=c(),
diverse_quantile=0.90,
type="motif"
){
div_res <- diverseFilt(control_res = control_res,
pathway_genes = pathway_genes,
diverse_quantile = diverse_quantile,
type=type
)
motif_heat <- superheat(div_res$diverse_mat[,pathway_genes],
pretty.order.rows = T,
heat.pal = blackPal(11),
bottom.label.text.angle = 90,
yr = sqrt(div_res$diverse_mat$cell_types),
yr.plot.type='bar',
yr.axis.name = "sqrt(No.\n cell types)",
row.title = "Pathway motifs",
column.title = "Pathway genes",
bottom.label.size = 0.3,
grid.hline.col = "white",
grid.hline.size = 2,
scale=TRUE
)
return(motif_heat)
}
motif_heat <- motif_heatmap(control_res = control_res,
pathway_genes = pathway_genes,
diverse_quantile = diverse_quantile,
type="motif"
)
div_res <- diverseFilt(control_res = control_res,
pathway_genes = pathway_genes,
diverse_quantile = diverse_quantile,
type="motif")
devtools::install_github("rlbarter/superheat")
source("./scripts/analysis/imports.R")
# Specify pathway name (as saved in pathway_df) and get genes.
pathway_name =  'Tgf-beta family receptors'
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
# Thresholds for processing data.
min_genes_pathway = 2 # tgfb min. number of genes expressed
min_expr_threshold = 0.2 #
diverse_quantile = 0.9
# Optimal number of pathway components (computed previously with silh. score)
optimal_k_pathway = 30
# Computes the dispersion on cell types expressing pathway using distance in PCA space
control_res  = fullControlPathway(pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
seurat_obj = master_seurat,
n_samples = 100,
filter_manual = T,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold,
n_pcs = 100,
manual_embedding = pca_proj, # PCA embedding for dispersion
dist_metric = "euclidean"
)
div_res <- diverseFilt(control_res = control_res,
pathway_genes = pathway_genes,
diverse_quantile = diverse_quantile,
type="motifs"
)
superheat::superheat(div_res$diverse_mat[,pathway_genes], legend.breaks = seq(0,1,11))
source("./scripts/analysis/imports.R")
master_seurat@meta.data$dataset %>% unique()
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Pathway_vs_Global_Distance_Density.R")
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Pathway_vs_Global_Distance_Density.R")
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Pathway_vs_Global_Distance_Density.R")
df
df
head(df)
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Pathway_vs_Global_Distance_Density.R")
pathway_df$pathway %>% unique()
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Pathway_vs_Global_Distance_Density.R")
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Pathway_vs_Global_Distance_Density.R")
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Figure_5_S4A_Niv_Computations.R")
saved_files
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Figure_5_S4A_Niv_Computations.R")
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Figure_5_S4A_Niv_Computations.R")
list.files(path=silh_res_dir)
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Figure_5_S4A_Niv_Computations.R")
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Figure_5_S4A_Niv_Computations.R")
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Figure_5_S4A.R")
saved_files
list.files(path=silh_res_dir,
pattern = "_ale.RDS")
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Figure_5_S4A.R")
pathway_df
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Pathway_vs_Global_Distance_Density.R")
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Pathway_vs_Global_Distance_Density.R")
pathway_list
full_pathway_list
saved_idx
full_pathway_list
saved_files
saved_files <- paste(list.files(path=silh_res_dir,
pattern = "_ale.RDS"),
sep ="") # ale is Alejandro's personal ID
saved_files
silh_res_dir = "./scripts/figures/peak_analysis/silhouette_res/silh_rds/alejo_res/"
saved_files
saved_files <- paste(list.files(path=silh_res_dir,
pattern = "_ale.RDS"),
sep ="") # ale is Alejandro's personal ID
saved_files
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Pathway_vs_Global_Distance_Density.R")
source("./scripts/analysis/imports.R")
master_seurat %>% VariableFeatures()
"Tdgf1" %in% (master_seurat %>% VariableFeatures())
c(c(1,2), "x")
source("~/Documents/Research/Caltech/Elowitz/motifs/Reviewer_Tdgf1_Tgfb.R")
optimal_k_pathway = perc_k_finder(z_score = silh_z_plt[[2]], percentile = 0.9)
# Computes the dispersion on cell types expressing pathway using distance in PCA space
control_res  = fullControlPathway(pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
seurat_obj = master_seurat,
n_samples = 100,
filter_manual = T,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold,
n_pcs = 100,
manual_embedding = pca_proj, # PCA embedding for dispersion
dist_metric = "euclidean"
)
# Plot global dendrogram with pathway states
pdf(paste(fig_dir, "Tdgf1_Tgfb_global_dendr.pdf", sep=""))
glob_dendr <- global_dendr(control_res = control_res,
seurat_obj = master_seurat,
use_pca = T,
n_pcs = 1:20,
clust_method = 'ward.D2',
dist_metric ='cosine')
print(glob_dendr$plt)
dev.off()
# Ranking of dispersion scores of profiles
rank_plot <- rank_diversity(pathway_genes = pathway_genes,
min_genes_on = min_genes_pathway,
dist_metric = "euclidean",
make_plot = T,
k_final = optimal_k_pathway,
min_expr = min_expr_threshold,
manual_embedding = pca_proj,
seurat_obj = master_seurat
)
ggsave(paste(fig_dir, "Tdgf1_Tgfb_rank.pdf", sep = ""), width = 7, height = 7)
# ECDF of dispersion scores
ecdf_plot = ecdf_diversity(control_res)
ggsave(paste(fig_dir, "Tdgf1_Tgfb_ecdf.pdf", sep = ""), width = 7, height = 7)
# Motif heatmap, motifs defined as profiles above 90th percentile of dispersion
pdf(paste(fig_dir, "Tdgf1_Tgfb_motif_heatmap.pdf", sep=""))
motif_heat <- motif_heatmap(control_res = control_res,
pathway_genes = pathway_genes,
diverse_quantile = diverse_quantile,
type="motif"
)
print(motif_heat)
dev.off()
# Motif distribution across tissues and organs.
motif_ct <- motif_ct_heatmap(control_res = control_res,
pathway_genes = pathway_genes,
diverse_quantile = diverse_quantile,
type="motif"
)
ggsave(plot = motif_ct, paste(fig_dir, "Tdgf1_Tgfb_motif_ct.pdf", sep=""))
# Private profiles heatmap
pdf(paste(fig_dir, "Tdgf1_Tgfb_private_heatmap.pdf", sep=""))
priv_heat <- motif_heatmap(control_res = control_res,
pathway_genes = pathway_genes,
diverse_quantile = diverse_quantile,
type="private"
)
print(priv_heat)
dev.off()
# UMAP showing cell types with pathway "ON"
g_umap <- global_umap(control_res = control_res,
seurat_obj = master_seurat,
use_pca = T,
n_pcs = 1:20,
clust_method = "ward.D2",
dist_metric = "cosine")
ggsave(plot = g_umap, paste(fig_dir, "Tdgf1_Tgfb_umap_on.pdf", sep=""))
optimal_k_pathway
pipe_run
pipe_run$data_frame %>% dim()
pipe_run$data_frame %>% filter("Tdgf1" > 0.5)
pipe_run$data_frame %>% filter("Tdgf1" > 0.5) %>% shape()
pipe_run$data_frame %>% filter("Tdgf1" > 0.5) %>% dim()
pipe_run$data_frame %>% filter("Tdgf1" > 0.8) %>% dim()
pipe_run$data_frame %>% filter(Tdgf1 > 0.8)
pipe_run$data_frame %>% filter(Tdgf1 > 0.5)
pipe_run$data_frame %>% filter(Tdgf1 > 0.5) %>% dim()
pipe_run$data_frame %>% filter(Tdgf1 > 0.5) %>% dim()
pipe_run$data_frame %>% filter(Tdgf1 > 0.2) %>% dim()
pipe_run$data_frame %>% filter(Tdgf1 > 0.2)
silh_z_plt[[1]]
silh_z_plt[[2]]
source("~/Documents/Research/Caltech/Elowitz/motifs/Reviewer_Tdgf1_Tgfb.R")
source("~/Documents/Research/Caltech/Elowitz/motifs/Reviewer_Tdgf1_Tgfb.R")
source("~/Documents/Research/Caltech/Elowitz/motifs/Reviewer_Tdgf1_Tgfb.R")
silh_z_plt <- silhouette_zscore(silh_result = silh_plt,
min_expr = min_expr,
x_offset = 6,
max.y = 0.43,
min.y = 0.17,
k_max = 200
)
silh_z_plt
ggsave(paste(fig_dir, "Tdgf1_Tgfb_silh.pdf", sep = ""), width = 7, height = 7)
# Optimal number of pathway components (computed previously with silh. score)
optimal_k_pathway = perc_k_finder(z_score = silh_z_plt[[2]], percentile = 0.9)
optimal_k_pathway
silh_z_plt[[2]] %>% max()%>% which()
silh_z_plt[[2]] %>% max()
silh_z_plt[[2]]
silh_z_plt[[2]] %>% max()
silh_z_plt[[2]][[2:length(silh_z_plt[[2]])]] %>% max()
silh_z_plt[[2]][2:length(silh_z_plt[[2]])] %>% max()
silh_z_plt[[2]][2:length(silh_z_plt[[2]])] %>% max() %>% which()
silh_z_plt[[2]][2:length(silh_z_plt[[2]])] %>% max() %>% index()
silh_z_plt[[2]][2:length(silh_z_plt[[2]])]%>% which.max()
silh_z_plt[[2]][2:length(silh_z_plt[[2]])] %>% length()
silh_z_plt[[2]] %>% length()
pdf(paste(fig_dir, "Tdgf1_Tgfb_heatmap",sep=""))
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = 33,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
print(pipe_run$plot)
dev.off()
diag(matrix(0,0,0,0))
diag(matrix(1,0,0,2))
diag(matrix((1,0,0,2)))
matrix()
matrix(c(1,0),c(0,2))
matrix((c(1,0),c(0,2)))
matrix(c(c(1,0),c(0,2)))
matrix(c(c(1,0),c(0,2)),nrow = 2)
matrix(c(c(1,0),c(0,2)),nrow = 2) %>% diag()
library(dplyr)
matrix(c(c(1,0),c(0,2)),nrow = 2) %>% diag()
matrix(c(c(1,0),c(0,2)),nrow = 2) %>% diag() -> NA
x = matrix(c(c(1,0),c(0,2)),nrow = 2)
diag(x) <- NA
x
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Figure_6C.R")
output_dir
/Users/niveditakanrar/Documents/Research/Caltech/Elowitz/motifs/scripts/figures/peak_analysis/silhouette_res/silh_rds/alejo_res/Tgf-beta family receptors_profiles.csv
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Figure_6C.R")
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Figure_6C.R")
pathway_df[pathway_df$pathway == "Adenylyl Cyclase",]
source("./scripts/analysis/imports.R")
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Zara_Adelynyl_Cyclase.R")
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = 30,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
print(pipe_run$plot)
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Zara_Adelynyl_Cyclase.R")
pipe_run$matrix %>% dim()
pipe_run$data_frame %>% dim()
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Zara_Adelynyl_Cyclase.R")
pathway_genes
pathway_name =  'PDE'
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
pathway_genes
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Zara_Adelynyl_Cyclase.R")
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = 30,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
pipe_run$data_frame %>% dim()
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Zara_Adelynyl_PDE.R")
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Zara_Adelynyl_PDE.R")
silh_z_plt
ggsave(paste(fig_dir, "Figure_3A_",pathway_name,".pdf",sep=""), width = 7, height = 7)
# Make a plot of clustered profiles for cell types with pathway "ON"
pdf(paste(fig_dir, "Figure_3B_",pathway_name,".pdf",sep=""))
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
print(pipe_run$plot)
dev.off()
optimal_k_pathway
pipe_run$plot
dev.off()
pipe_run$plot
pdf(paste(fig_dir, "Figure_3B_",pathway_name,".pdf",sep=""))
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
print(pipe_run$plot)
dev.off()
# Plot global dendrogram with pathway states
pdf(paste(fig_dir, "Figure_3C_",pathway_name,".pdf",sep=""))
glob_dendr <- global_dendr(control_res = control_res,
seurat_obj = master_seurat,
use_pca = T,
n_pcs = 1:20,
clust_method = 'ward.D2',
dist_metric ='cosine')
print(glob_dendr$plt)
dev.off()
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Zara_Adelynyl_PDE.R")
source("~/Documents/Research/Caltech/Elowitz/motifs/scripts/analysis/Figure_4F_Unordered.R")
source("./scripts/analysis/imports.R")
# Specify pathway name (as saved in pathway_df) and get genes.
pathway_name =  'Frizzled and Lrp5 6 receptors for Wnt B Catenin Signaling'
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
# Thresholds for processing data.
min_genes_pathway = 2 # tgfb min. number of genes expressed
min_expr_threshold = 0.2 # tgfb minimum expression threshold for gene to be on
diverse_quantile = 0.9
# Optimal number of pathway components (computed previously with silh. score)
optimal_k_pathway = 37
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
pipe_run$data_frame %>% dim()
pipe_run$matrix %>% dim()
superheat(pipe_run$matrix[pathway_genes,])
pipe_run$matrix[pathway_genes,]
superheat(pipe_run$matrix[,pathway_genes])
superheat(pipe_run$matrix[,pathway_genes],heat.pal = blackPal(10))
source("./scripts/analysis/imports.R")
fig_dir
# Specify pathway name (as saved in pathway_df) and get genes.
pathway_name =  'Tgf-beta family receptors'
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
pathway_genes = c(pathway_genes, "Tdgf1")
# Thresholds for processing data.
min_genes_pathway = 2 # tgfb min. number of genes expressed
min_expr_threshold = 0.2 # tgfb minimum expression threshold for gene to be on
diverse_quantile = 0.9
# Computing the optimal silhouette score
silh_plt = silhouettePlot(pathway_genes = pathway_genes,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold,
n_bootstraps = 100,
seurat_obj = master_seurat,
max_k = 200)
silh_z_plt <- silhouette_zscore(silh_result = silh_plt,
min_expr = min_expr,
x_offset = 6,
max.y = 0.43,
min.y = 0.17,
k_max = 200
)
silh_z_plt
ggsave(paste(fig_dir, "Tdgf1_Tgfb_silh.pdf", sep = ""), width = 7, height = 7)
# Optimal number of pathway components (computed previously with silh. score)
optimal_k_pathway = perc_k_finder(z_score = silh_z_plt[[2]], percentile = 0.9)
# Specify pathway name (as saved in pathway_df) and get genes.
pathway_name =  'Tgf-beta family receptors'
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
pathway_genes = c(pathway_genes, "Tdgf1")
# Thresholds for processing data.
min_genes_pathway = 2 # tgfb min. number of genes expressed
min_expr_threshold = 0.2 # tgfb minimum expression threshold for gene to be on
diverse_quantile = 0.9
# Computing the optimal silhouette score
silh_plt = silhouettePlot(pathway_genes = pathway_genes,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold,
n_bootstraps = 100,
seurat_obj = master_seurat,
max_k = 200)
silh_z_plt <- silhouette_zscore(silh_result = silh_plt,
min_expr = min_expr,
x_offset = 6,
max.y = 0.43,
min.y = 0.17,
k_max = 200
)
silh_z_plt
ggsave(paste(fig_dir, "Tdgf1_Tgfb_silh.pdf", sep = ""), width = 7, height = 7)
# Optimal number of pathway components (computed previously with silh. score)
optimal_k_pathway = which.max(z_score = silh_z_plt[[2]])
optimal_k_pathway = which.max(ilh_z_plt[[2]])
optimal_k_pathway = which.max(silh_z_plt[[2]])
optimal_k_p
optimal_k_pathway
