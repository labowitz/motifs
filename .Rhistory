for(i in 1:length(matrix_list))
colnames(matrix_list[[i]]) <- paste(colnames(matrix_list[[i]]),
sample_id[i],
sep="_")
# Merge all matrices
# All have the same number of genes so we can directly merge
master_matrix = do.call(cbind,
matrix_list)
# Make filter for Seurat
which_cells = colnames(master_matrix)[which(colnames(master_matrix) %in%
meta_df$cell_id)]
master_matrix = master_matrix[,which_cells]
meta_df %>%
filter(cell_id %in% which_cells) -> meta_df
row.names(meta_df)<- meta_df$cell_id
head(meta_df)
heat(master_matrix)
head(master_matrix)
data_dir <- "data/raw_data/gastrulation/"
sample_files <- list.files(path=data_dir,
pattern = "GSE")
meta_files <- list.files(path=data_dir,
pattern = "metadata")
# format is in 10x readable folders
matrix_list = list()
for( i in 1:length(sample_files))
matrix_list[[i]] = Read10X(paste(data_dir,
sample_files[i],
sep=""))
# Split a multi-page Excel file with different timepoints.
sample_id = str_split(sample_files,
'_',
simplify=T)[,3]
# Read all csvs and save correct cell_id
# Cell column names will carry BC + sample id + stage
meta_list = list()
for(i in 1:length(meta_files)){
meta_list[[i]] = read.csv(paste(data_dir,
meta_files[i],
sep=''),
header = T)
meta_list[[i]]$sample = sample_id[i]
# define cell_id as BC + sample_id
meta_list[[i]] <- meta_list[[i]] %>%
mutate(cell_id = paste(BC,
sample,
sep="_"))
}
# Merge all metadata files
meta_df = do.call(rbind,
meta_list)
# Rename cells in matrix with BC + sample id + stage format
sample_id = str_split(sample_files,
'_',
simplify  = T)[,3]
for(i in 1:length(matrix_list))
colnames(matrix_list[[i]]) <- paste(colnames(matrix_list[[i]]),
sample_id[i],
sep="_")
# Merge all matrices
# All have the same number of genes so we can directly merge
master_matrix = do.call(cbind,
matrix_list)
# Make filter for Seurat
which_cells = colnames(master_matrix)[which(colnames(master_matrix) %in%
meta_df$cell_id)]
master_matrix = master_matrix[,which_cells]
meta_df %>%
filter(cell_id %in% which_cells) -> meta_df
head(meta_df)
meta_df %>%
group_by(BC) %>%
filter(n()>1)
dim(meta_df)
meta_df %>%
group_by(BC) %>%
filter(n()>1) %>% dim()
meta_df %>%
group_by(cell_id) %>%
filter(n()>1) %>% dim()
meta_df %>%
group_by(cell_id) %>%
filter(n()>1) %>% select(sample) %>% union()
meta_df %>%
group_by(cell_id) %>%
filter(n()>1) %>% select(sample) %>% unique()
meta_df %>%
group_by(cell_id) %>%
filter(n()>1) %>% count(sample)
meta_df %>%
group_by(cell_id) %>%
filter(n()>1) %>% select(sample)
meta_df %>%
group_by(cell_id) %>%
filter(n()>1) %>% select(sample) %>% unique(sample)
meta_df %>%
group_by(cell_id) %>%
filter(n()>1) %>% select(sample) %>% unique()
meta_df %>%
group_by(cell_id) %>%
filter(n()>1) %>% select(sample) -> x
x$sample %>% unique()
meta_df %>%
group_by(cell_id) %>%
filter(n()>1) %>% dim()
meta_df %>%
group_by(cell_id) %>%
filter(n()>1) %>% select(embryo)
meta_df %>%
group_by(cell_id) %>%
filter(n()>1) %>% select(Embryo)
meta_df %>%
group_by(cell_id, Embryo) %>%
filter(n()>1) %>% select(sample) -> x
x$sample %>% unique()
x
source("./scripts/analysis/imports_new.R")
master_seurat$dataset %>% unique()
data_dir <- "data/raw_data/gastrulation/"
sample_files <- list.files(path=data_dir,
pattern = "GSE")
meta_files <- list.files(path=data_dir,
pattern = "metadata")
# format is in 10x readable folders
matrix_list = list()
for( i in 1:length(sample_files))
matrix_list[[i]] = Read10X(paste(data_dir,
sample_files[i],
sep=""))
# Split a multi-page Excel file with different timepoints.
sample_id = str_split(sample_files,
'_',
simplify=T)[,3]
# Read all csvs and save correct cell_id
# Cell column names will carry BC + sample id + stage
meta_list = list()
for(i in 1:length(meta_files)){
meta_list[[i]] = read.csv(paste(data_dir,
meta_files[i],
sep=''),
header = T)
meta_list[[i]]$sample = sample_id[i]
# define cell_id as BC + sample_id
meta_list[[i]] <- meta_list[[i]] %>%
mutate(cell_id = paste(BC,
sample,
sep="_"))
}
meta_files
meta_list[[2]] %>% colnam
meta_list[[2]] %>% colnames()
sample_files
matrix_list[[3]] %>% colnames()
(matrix_list[[3]] %>% colnames()) %in% (matrix_list[[4]] %>% colnames())
(matrix_list[[3]] %>% colnames())[(matrix_list[[3]] %>% colnames()) %in% (matrix_list[[4]] %>% colnames())]
(matrix_list[[3]] %>% colnames())[(matrix_list[[3]] %>% colnames()) %in% (matrix_list[[4]] %>% colnames())] %>% length()
(matrix_list[[4]] %>% colnames())[(matrix_list[[4]] %>% colnames()) %in% (matrix_list[[3]] %>% colnames())] %>% length()
sample_files
dim(matrix_list[[3]])
dim(matrix_list[[4]])
dim(meta_list[[3]])
head(rownames(meta_list[[4]]))
head(meta_list[[3]]$cell_id)
length(colnames(matrix_list[[4]]) %in% meta_list[[3]]$BC)
length(colnames(matrix_list[[3]]) %in% meta_list[[3]]$BC)
dim(meta_list[[3]])
sum(colnames(matrix_list[[4]]) %in% meta_list[[3]]$BC)
sum(colnames(matrix_list[[3]]) %in% meta_list[[3]]$BC)
12737 + 265
samples_list
sample_files
meta_files
(matrix_list[[4]] %>% colnames())[(matrix_list[[4]] %>% colnames()) %in% (matrix_list[[3]] %>% colnames())] %>% length()
(matrix_list[[3]] %>% colnames())[(matrix_list[[3]] %>% colnames()) %in% (matrix_list[[4]] %>% colnames())] %>% length()
library(ggplotify)
source("./scripts/analysis/imports_new.R")
## Change these variables
filename = "tgfb_trial" # how name is appended to files for pathway
## Directories for the files
output_dir = paste("./scripts/analysis/outputs/", filename, "_analysis/", filename, sep = "")
fig_dir = "./scripts/figures/"
pathway_df = readRDS("./data/processed_data/all_pathways.RDS")
pathway_name =  "Bmp_Tgfb" # tgfb pathway name
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df)
min_genes_pathway = 2 # tgfb min. number of genes expressed
min_expr_threshold = 0.2 # tgfb minimum expression threshold for gene to be on
optimal_k_pathway = 30 # optimal pathway components, computed from z-score
diverse_quantile = 0.9
## Make a plot of k_opt profiles for cell types with pathway "ON
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
pdf(file = paste(fig_dir, "Figure_3B.pdf",sep=""))
pipe_run$plot
dev.off()
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Figure_5_Revise.R")
source("./scripts/analysis/imports_new.R")
all_csv <- read.csv("data/raw_data/pathbank/pathbank_all_proteins.csv")
head(all_csv)
all_csv %>% filter(Species == "Mus musculus")
all_csv %>% filter(Species == "Mus musculus") %>% dim()
all_csv %>% filter(Species == "Mus musculus") %>% head()
all_csv %>% filter(Species == "Mus musculus") %>% select("Pathway.Name") %>% unique()
all_csv %>% filter(Species == "Mus musculus") %>% select("Pathway.Name") %>% unique() %>% length()
all_csv %>% filter(Species == "Mus musculus")
all_csv %>% filter(Species == "Mus musculus") %>% head()
all_csv <- read.table("data/raw_data/pathbank/pathbank_all_proteins.csv",header = T,sep = ",")
all_csv <- read.csv("data/raw_data/pathbank/pathbank_all_proteins.csv")
head(all_csv)
colnames(all_csv)
all_csv %>% filter("Species" == "Mus musculus") %>% pull("Pathway.Name") %>% unique() %>% length()
all_csv %>% filter("Species" == "Mus musculus") %>% pull("Pathway.Name")
all_csv %>% filter("Species" == "Mus musculus") %>% select("Pathway.Name")
all_csv
colnames(all_csv)
all_csv %>% filter("Species" == "Mus musculus") %>% select("Pathway.Name" )
all_csv %>% filter("Species" == "Mus musculus") %>% select(Pathway.Name)
all_csv %>% filter("Species" == "Mus musculus") %>% select("Pathway Name") %>% unique() %>% length()
all_csv %>% filter("Species" == "Mus musculus") %>% select("Pathway Name") %>% unique()
all_csv %>% filter("Species" == "Mus musculus") %>% select(`Pathway Name`) %>% unique()
colnames(all_csv)
colnames(all_csv)[[2]]
all_csv %>% filter("Species" == "Mus musculus") %>% select(colnames(all_csv)[[2]]) %>% unique()
all_csv %>% filter("Species" == "Mus musculus") %>% select(colnames(all_csv)[[2]])
all_csv %>% filter("Species" == "Mus musculus") %>% dim()
all_csv
all_csv %>% filter(Species == "Mus musculus") %>% dim()
all_csv %>% filter(Species == "Mus musculus") %>% select(Pathway.Name) %>% unique() %>% length()
all_csv %>% filter(Species == "Mus musculus") %>% pull(Pathway.Name) %>% unique() %>% length()
all_csv %>% filter(Species == "Mus musculus", Pathway.Subject != "Metabolic") %>% pull(Pathway.Name) %>% unique() %>% length()
all_csv %>% filter(Species == "Mus musculus", Pathway.Subject != "Metabolic") %>% pull(Pathway.Name)
all_csv %>% filter(Species == "Mus musculus", Pathway.Subject != "Metabolic") %>% pull(Pathway.Name) %>% unique()
all_csv %>% filter(Species == "Mus musculus", Pathway.Subject != "Metabolic", Pathway.Subject != "Disease") %>% pull(Pathway.Name) %>% unique()
all_csv %>% filter(Species == "Mus musculus", Pathway.Subject != "Metabolic") %>% pull(Pathway.Name) %>% unique()
all_csv %>% filter(Species == "Mus musculus", Pathway.Subject != "Metabolic") %>% pull(Pathway.Name) %>% unique() %>% length()
all_csv %>% filter(Species == "Mus musculus", Pathway.Subject != "Metabolic") %>% pull(Pathway.Name) %>% unique()
source("./scripts/analysis/imports_new.R")
library(networkD3)
library(webshot)
library(stringr)
## Directories for the files
fig_dir = "./scripts/figures/"
pathway_df = readRDS("./data/processed_data/all_pathways.RDS")
pathway_name =  "Bmp_Tgfb" # tgfb pathway name
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df)
min_genes_pathway = 2 # tgfb min. number of genes expressed
min_expr_threshold = 0.2 # tgfb minimum expression threshold for gene to be on
optimal_k_pathway = 30 # optimal pathway components, computed from z-score
diverse_quantile = 0.9
## Running fullControlPathway
control_res  = fullControlPathway(pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
seurat_obj = master_seurat, # seurat object
null_list = hvg_genes, #list of highly variable genes
n_samples = 100,
filter_manual = T,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold,
n_pcs = 100, # how many PCs to use
manual_embedding = pca_proj, # PCA embedding for diversity
dist_metric = "euclidean"
)
## Get profile labels of all cell types
glob_dendr <- global_dendr(control_res = control_res,
seurat_obj = master_seurat,
use_pca = T,
n_pcs = 1:20,
clust_method = 'ward.D2',
dist_metric ='cosine')
## Construct the dataframe for Sankey plot
# Generate colors for 31 pathway profiles (includes non-expressing profile 0)
colors_1206$class_label = makeQualitativePal(length(glob_dendr[[2]]$class_label %>% unique) + 1)
label_order <- c(21, 10, 24, 9, 8, 14, 13, 16, 7, 20, 15, 23, 22, 27)
glob_dendr[[2]] <- glob_dendr[[2]] %>% dplyr::filter(class_label %in% label_order)
glob_dendr[[2]]$class_label <- as.numeric(glob_dendr[[2]]$class_label)
temp <-rep(NA, length(glob_dendr[[2]]$class_label))
# Match label order of dendrogram in Fig. 3B
str_col = ""
## Printing string of colors correctly
for (i in 1:length(label_order)){
temp[glob_dendr[[2]]$class_label == label_order[[i]]] <- i
str_col <- cat(str_col, "\"", colors_1206$class_label[[sort(label_order)[[i]] + 1]], "\", ", sep="")
}
glob_dendr[[2]]$class_label <- temp
# Format dataframe for Sankey plot
# For each profile, count how many cell types are in each tissue class
cell_types = rep(c("Epithelium", "Macrophage", "Fibroblast", "Endothelial"),
each = length(label_order))
receptor_profiles = rep(1:length(label_order), times = 4)
vals <- rep(0, length(label_order)*4)
# DataFrame that will store the counts
# Column cell types is the tissue profile
# Column receptor profile is the numerical receptor profile (0-30)
# Sankey takes only numerical values for nodes, so we rename the nodes
# 0-3 are the tissues, 4-34 are the profiles.
df <- data.frame(cell_types = cell_types,
receptor_profiles = receptor_profiles,
n = vals,
IDsource=rep(NA,length(label_order)*4),
IDtarget=rep(NA,length(label_order)*4))
# Count how many cell types are in Epithelium for each data frame
df_epi <- glob_dendr[[2]] %>%
dplyr::filter(Cell_class == "Epithelium") %>%
dplyr::group_by(class_label) %>%
dplyr::select(class_label) %>%
dplyr::count() %>%
data.frame()
df[df$cell_types == "Epithelium" & df$receptor_profiles %in% df_epi$class_label,]$n <- df_epi$n
df[df$cell_types == "Epithelium",]$IDtarget <- 1:length(label_order) + 3
df[df$cell_types == "Epithelium",]$IDsource <- rep(0, length(label_order))
df_macro <- glob_dendr[[2]] %>%
dplyr::filter(str_detect(cell_ontology_class, fixed("macrophage", ignore_case = TRUE))) %>%
dplyr::group_by(class_label) %>%
dplyr::select(class_label) %>%
dplyr::count() %>%
data.frame()
df[df$cell_types == "Macrophage" & df$receptor_profiles %in% df_macro$class_label,]$n <- df_macro$n
df[df$cell_types == "Macrophage",]$IDtarget <- 1:length(label_order) + 3
df[df$cell_types == "Macrophage",]$IDsource <- rep(1, length(label_order))
df_fibro <- glob_dendr[[2]] %>%
dplyr::filter(str_detect(cell_ontology_class,
fixed("fibroblast", ignore_case = TRUE))) %>%
dplyr::group_by(class_label) %>%
dplyr::select(class_label) %>%
dplyr::count() %>%
data.frame()
df[df$cell_types == "Fibroblast" & df$receptor_profiles %in% df_fibro$class_label,]$n <- df_fibro$n
df[df$cell_types == "Fibroblast",]$IDtarget <- 1:length(label_order) + 3
df[df$cell_types == "Fibroblast",]$IDsource <- rep(2, length(label_order))
df_endo <- glob_dendr[[2]] %>%
dplyr::filter(Cell_class == "Endothelial") %>%
dplyr::group_by(class_label) %>%
dplyr::select(class_label) %>%
dplyr::count() %>%
data.frame()
df[df$cell_types == "Endothelial" & df$receptor_profiles %in% df_endo$class_label,]$n <- df_endo$n
df[df$cell_types == "Endothelial",]$IDtarget <- 1:length(label_order) + 3
df[df$cell_types == "Endothelial",]$IDsource <- rep(3, length(label_order))
names(df) = c("source", "target", "value", "IDsource", "IDtarget")
# Generate dataframe of node names
nodes <- data.frame("name" = c(c("Epithelium",
"Macrophage",
"Fibroblast",
"Endothelial"),
as.character(label_order)))
# Sankey wants removal of zero counts
df <- df %>% dplyr::filter(value != 0)
df$IDsource <- as.numeric(df$IDsource)
df$IDtarget <- as.numeric(df$IDtarget)
df
library(ggplotify)
source("./scripts/analysis/imports_new.R")
## Change these variables
filename = "tgfb_trial" # how name is appended to files for pathway
## Directories for the files
output_dir = paste("./scripts/analysis/outputs/", filename, "_analysis/", filename, sep = "")
fig_dir = "./scripts/figures/"
pathway_df = readRDS("./data/processed_data/all_pathways.RDS")
pathway_name =  "Bmp_Tgfb" # tgfb pathway name
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df)
min_genes_pathway = 2 # tgfb min. number of genes expressed
min_expr_threshold = 0.2 # tgfb minimum expression threshold for gene to be on
optimal_k_pathway = 30 # optimal pathway components, computed from z-score
diverse_quantile = 0.9
## Make a plot of k_opt profiles for cell types with pathway "ON
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
pdf(file = paste(fig_dir, "Figure_3B.pdf",sep=""))
pipe_run$plot
dev.off()
## Computing the optimal silhouette score
silh_plt = silhouettePlot(pathway_genes = pathway_genes,
min_genes_on = min_genes_on,
min_expr = min_expr,
n_bootstraps = 5,
seurat_obj = master_seurat)
silh_z_plt <- silhouette_zscore(silh_result = silh_plt,
min_expr = min_expr,
x_offset = 6,
max.y = 0.43,
min.y = 0.17
)
silh_z_plt
ggsave(paste(fig_dir, "Figure_3A.pdf", sep = ""), width = 7, height = 7)
silh_z_plt
silh_z_plt[[1]]
source("./scripts/analysis/imports_new.R")
all_csv <- read.csv("data/raw_data/pathbank/pathbank_all_proteins.csv")
all_csv %>%
filter(Species == "Mus musculus",
Pathway.Subject != "Metabolic") %>%
pull(Pathway.Name) %>%
unique() -> all_csv
all_csv
source("./scripts/analysis/imports_new.R")
all_csv <- read.csv("data/raw_data/pathbank/pathbank_all_proteins.csv")
all_csv %>%
filter(Species == "Mus musculus",
Pathway.Subject != "Metabolic")
all_csv$Pathway.Subject %>% unique()
all_csv <- read.csv("data/raw_data/pathbank/pathbank_all_proteins.csv")
all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Metabolic") |
(Pathway.Subject == "Protein" & Pathway.Subject %>% str_detect("Signaling")))
all_csv
dim(all_csv)
all_csv$Pathway.Name %>% unique()
all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Metabolic") |
(Pathway.Subject == "Protein" & Pathway.Subject %>% str_detect("Signaling")))
all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Metabolic") |
(Pathway.Subject == "Protein" & Pathway.Subject %>% str_detect("Signaling"))) -> all_csv
all_csv$Pathway.Name %>% unique()
all_csv %>%
filter(Species == "Mus musculus")  %>% dim()
all_csv %>%
filter(Species == "Mus musculus")  %>% pull(Pathway.Name) %>% unique %>% length()
all_csv %>%
filter(Species == "Mus musculus")  %>% pull(Pathway.Name) %>% unique() %>% length()
all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Signaling") |
(Pathway.Subject == "Protein" & Pathway.Subject %>% str_detect("Signaling"))) %>% pull(Pathway.Name) %>% unique() %>% length()
all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Signaling") |
(Pathway.Subject == "Protein" & Pathway.Subject %>% str_detect("Signaling")))
all_csv
all_csv$Pathway.Subject %>% unique()
all_csv <- read.csv("data/raw_data/pathbank/pathbank_all_proteins.csv")
all_csv$Pathway.Subject %>% unique()
all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Signaling") |
(Pathway.Subject == "Protein" & str_detect(Pathway.Subject, "Signaling"))) %>% pull(Pathway.Name) %>% unique()
all_csv %>%
filter(Species == "Mus musculus") %>% filter(str_detect(Pathway.Subject, "Signaling")) %>% pull(Pathway.Name) %>% unique()
all_csv %>%
filter(Species == "Mus musculus") %>% filter(str_detect(Pathway.Subject, "ignaling")) %>% pull(Pathway.Name) %>% unique()
head(all_csv)
all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Signaling") |
(Pathway.Subject == "Protein" & str_detect(Pathway.Name, "signaling"))) %>% pull(Pathway.Name) %>% unique()
all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Protein" & str_detect(Pathway.Name, "signaling"))) %>% pull(Pathway.Name) %>% unique()
all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Protein") | (Pathway.Subject == "Signaling")) %>% pull(Pathway.Name) %>% unique()
all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Protein") | (Pathway.Subject == "Signaling")) %>% group_by(Pathway.Name) %>% count() %>% arrange(desc(n))
all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Protein") | (Pathway.Subject == "Signaling")) %>% group_by(Pathway.Name) %>% count() %>% arrange(desc(n)) %>% tail()
all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Protein") | (Pathway.Subject == "Signaling")) %>%
group_by(Pathway.Name) %>%
count() %>% filter(n > 6) %>% pull(Pathway.Name) %>% unique()
all_csv %>%
filter(Species == "Mus musculus") %>%
filter((Pathway.Subject == "Protein") | (Pathway.Subject == "Signaling")) %>%
group_by(Pathway.Name) %>%
count() %>% filter(n > 5) %>% pull(Pathway.Name) %>% unique()
library(ggplotify)
source("./scripts/analysis/imports_new.R")
## Change these variables
filename = "eph_trial" # how name is appended to files for pathway
## Directories for the files
output_dir = paste("./scripts/analysis/outputs/", filename, "_analysis/", filename, sep = "")
fig_dir = "./scripts/figures/eph_trial/"
pathway_df = readRDS("./data/processed_data/all_pathways.RDS")
pathway_df$pathway[all_pathways$pathway=='Eph_r'] <- 'Eph-Ephrin'
pathway_df$pathway[all_pathways$pathway=='Eph_l'] <- 'Eph-Ephrin'
pathway_name =  "Eph-Ephrin" # eph pathway name
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df)
min_genes_pathway = 2 # eph min. number of genes expressed
min_expr_threshold = 0.3 # eph minimum expression threshold for gene to be on
optimal_k_pathway = 54 # optimal pathway components, computed from z-score
diverse_quantile = 0.9
## Running fullControlPathway
control_res  = fullControlPathway(pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
seurat_obj = master_seurat, # seurat object
null_list = hvg_genes, #list of highly variable genes
n_samples = 100,
filter_manual = T,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold,
n_pcs = 100, # how many PCs to use
manual_embedding = pca_proj, # PCA embedding for diversity
dist_metric = "euclidean"
)
control_res$diversity
control_res$recurrence
