geom_histogram(aes(x),bins = 40,col="grey51",na.rm = T) +
geom_vline(xintercept = topbreaks)
dt1 %>%
ggplot() +
geom_histogram(aes(x),bins = 40,col="grey51",na.rm = T) +
geom_vline(xintercept = topbreaks) + geom_density()
dt1 %>%
ggplot() +
geom_histogram(aes(x),bins = 40,col="grey51",na.rm = T) +
geom_vline(xintercept = topbreaks) + geom_density(aes(y=stat_bin(density)))
dt1 %>%
ggplot() +
geom_histogram(aes(x),bins = 40,col="grey51",na.rm = T) +
geom_vline(xintercept = topbreaks) + geom_density(aes(y=..density..))
dt1 %>%
ggplot() +
geom_histogram(aes(x),bins = 40,col="grey51",na.rm = T) +
geom_vline(xintercept = topbreaks) + geom_density(aes(x=x,y=..density..))
ggplot(global_dist_df, aes(x=global_dist))+geom_histogram(aes(y=after_stat(density), binwidth=5))+geom_density()
ggplot(global_dist_df, aes(x=global_dist))+geom_histogram(aes(y=after_stat(density)))+geom_density()
global_dist_df %>%
ggplot(aes(x=global_dist)) +
geom_histogram(aes(y=after_stat(density))) +
geom_density() -> p
p
pg <- ggplot_build(p)
head(pg)
pg$data[[2]]
pg$data[[2]]
pg$data[[2]] %>% pull(x,y)
pg$data[[2]] %>% pull(x,y) %>% shape9)
pg$data[[2]] %>% pull(x,y) %>% dim()
pg$data[[2]] %>% pull(x,y) %>% length()
pg$data[[2]] %>% pull(c(x,y)) %>% length()
pg$data[[2]]$y
pg$data[[2]]$y -> counts
peak_indx <- c(F,diff(sign(c(diff(counts))))==-2,F) %>% which()
peak_idx
peak_in
peak_indx
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("./scripts/analysis/imports_new.R")
pathway_name =  "Tgf-beta family receptors" # tgfb pathway name
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
min_genes_pathway = 2 # tgfb min. number of genes expressed
min_expr_threshold = 0.2 # tgfb minimum expression threshold for gene to be on
optimal_k_pathway = 30 # optimal pathway components, computed from z-score
diverse_quantile = 0.9
dist_metric = "cosine"
n_pcs = 1:20
seurat_obj = master_seurat
## To generate a DataFrame with the gene exp. of cell states with pathway "ON"
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
# GLOBAL DISTANCE: euclidean or cosine distance in PCA space
global_coords = Embeddings(seurat_obj, reduction='pca')
global_coords = global_coords[pipe_run$data_frame$cell_id, n_pcs] # already set row names as cell id
global_dist = dist(global_coords)
global_dist <- data.frame(t(combn(rownames(global_coords),2)),
as.numeric(global_dist))
colnames(global_dist) <- c("cell_id_1", "cell_id_2", "global_dist")
global_dist_df %>%
ggplot(aes(x=global_dist)) +
geom_histogram(aes(y=after_stat(density))) +
geom_density() -> p
pg <- ggplot_build(p)
global_dist_df %>%
ggplot(aes(x=global_dist)) +
geom_histogram(aes(y=after_stat(density))) +
geom_density() -> p
p
global_dist_df %>%
ggplot(aes(x=global_dist)) +
geom_histogram(aes(x=global_dist,y=after_stat(density))) +
geom_density() -> p
p
global_dist_df
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
global_dist_df %>%
ggplot(aes(x=global_dist)) +
geom_histogram(aes(y=after_stat(density))) +
geom_density() +
geom_vline(xintercept = topbreaks) +
geom_vline(xintercept = botbreaks)
global_dist_df %>%
ggplot(aes(x=global_dist)) +
#geom_histogram(aes(y=after_stat(density))) +
#geom_density() +
geom_vline(xintercept = topbreaks) +
geom_vline(xintercept = botbreaks)
topbreaks
pg$data[[2]]
peak_indx <- c(F,diff(sign(c(diff(pg$data[[2]]$y))))==-2,F) %>% which()
peak_indx
topcounts <- pg$data[[2]]$x[peak_indx]
topcounts
topbreaks
topbreaks <- names(topcounts) %>% as.numeric()
global_dist_df %>%
ggplot(aes(x=global_dist)) +
geom_histogram(aes(y=after_stat(density))) +
geom_density() +
geom_vline(xintercept = topcounts) +
geom_vline(xintercept = botcounts)
append(c(0), botcounts)
botcounts
hist(global_dist_df$global_dist, breaks = append(c(0), botcounts))
cut(global_dist_df$global_dist, breaks = append(c(0), botcounts))
cut(global_dist_df$global_dist, breaks = append(c(0), botcounts)) %>% table()
botcounts
table(cut(global_dist_df$global_dist,append(c(0), botcounts)))
findInterval(global_dist_df$global_dist, append(c(0), botcounts))
findInterval(global_dist_df$global_dist, append(c(0), botcounts)) %>% unique()
source("~/.active-rstudio-document")
global_dist_df$bin
global_dist_df$bin %>% unique()
append(c(0), botcounts)
match(global_dist_df$bin, global_dist_df$bin %>% unique())
global_dist_df$bin <- append(c(0), botcounts)[match(global_dist_df$bin, global_dist_df$bin %>% unique())]
global_dist_df$bin
source("~/.active-rstudio-document")
global_dist_df
source("~/.active-rstudio-document")
global_dist_df$global_dist
source("./scripts/analysis/imports_new.R")
pathway_name =  "Tgf-beta family receptors" # tgfb pathway name
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
min_genes_pathway = 2 # tgfb min. number of genes expressed
min_expr_threshold = 0.2 # tgfb minimum expression threshold for gene to be on
optimal_k_pathway = 30 # optimal pathway components, computed from z-score
diverse_quantile = 0.9
dist_metric = "cosine"
n_pcs = 1:20
seurat_obj = master_seurat
## To generate a DataFrame with the gene exp. of cell states with pathway "ON"
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
# PAHTWAY DISTANCE: cosine distance in pathway gene exp.
pathway_dist = dist.cosine(as.matrix(pipe_run$data_frame[pathway_genes]))
pathway_dist_df <- data.frame(t(combn(pipe_run$data_frame$cell_id,2)),
as.numeric(pathway_dist))
colnames(pathway_dist_df) <- c("cell_id_1", "cell_id_2", "pathway_dist")
# GLOBAL DISTANCE: euclidean or cosine distance in PCA space
global_coords = Embeddings(seurat_obj, reduction='pca')
global_coords = global_coords[pipe_run$data_frame$cell_id, n_pcs] # already set row names as cell id
global_dist = dist(global_coords)
global_dist_df <- data.frame(t(combn(rownames(global_coords),2)),
as.numeric(global_dist))
colnames(global_dist_df) <- c("cell_id_1", "cell_id_2", "global_dist")
global_dist_df %>%
ggplot(aes(x=global_dist)) +
geom_histogram(aes(x=global_dist,y=after_stat(density))) +
geom_density() -> p
pg <- ggplot_build(p)
#peak_indx <- c(F,diff(sign(c(diff(pg$data[[2]]$y))))==-2,F) %>% which()
#topcounts <- pg$data[[2]]$x[peak_indx]
peak_indx <- c(F,diff(sign(c(diff(pg$data[[2]]$y))))==2,F) %>% which()
botcounts <- pg$data[[2]]$x[peak_indx]
global_dist_df$global_dist <- findInterval(global_dist_df$global_dist, append(c(0), botcounts))
global_dist_df$global_dist <- append(c(0), botcounts)[match(global_dist_df$global_dist, global_dist_df$global_dist %>% unique())] %>% as.factor()
merged_df <- merge(x = pathway_dist_df,
y = global_dist_df,
by.x = c("cell_id_1",
"cell_id_2"))
head(merged_df)
p <- ggplot(merged_df, aes(pathway_dist, global_dist)) +
geom_violin()+
#geom_point(alpha = 0.01) +
ggtitle("Pathway vs. Global Distance") +
xlab("Pathway Distance (cosine similarity on gene exp.)") +
ylab("Global Distance (euclidean distance on 20 PCs)")
p
p <- ggplot(merged_df, aes(pathway_dist, global_dist)) +
geom_boxplot()+
#geom_point(alpha = 0.01) +
ggtitle("Pathway vs. Global Distance") +
xlab("Pathway Distance (cosine similarity on gene exp.)") +
ylab("Global Distance (euclidean distance on 20 PCs)")
p
p <- ggplot(merged_df, aes(pathway_dist, global_dist)) +
geom_violin()+
#geom_point(alpha = 0.01) +
ggtitle("Pathway vs. Global Distance") +
xlab("Pathway Distance (cosine similarity on gene exp.)") +
ylab("Global Distance (euclidean distance on 20 PCs)")
p
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Plot_Distance_Pathway_vs_Global_by_dataset.R")
source("~/.active-rstudio-document")
geom_jitter()
p <- ggplot(merged_df, aes(pathway_dist, global_dist)) +
geom_violin()+geom_jitter()
#geom_point(alpha = 0.01) +
ggtitle("Pathway vs. Global Distance") +
xlab("Pathway Distance (cosine similarity on gene exp.)") +
ylab("Global Distance (euclidean distance on 20 PCs)")
p <- ggplot(merged_df, aes(pathway_dist, global_dist)) +
geom_violin()+geom_jitter()+
#geom_point(alpha = 0.01) +
ggtitle("Pathway vs. Global Distance") +
xlab("Pathway Distance (cosine similarity on gene exp.)") +
ylab("Global Distance (euclidean distance on 20 PCs)")
p
p <- ggplot(merged_df, aes(pathway_dist, global_dist)) +
geom_violin()+
#geom_point(alpha = 0.01) +
ggtitle("Pathway vs. Global Distance") +
xlab("Pathway Distance (cosine similarity on gene exp.)") +
ylab("Global Distance (euclidean distance on 20 PCs)")
p
source("~/Documents/Research/Elowitz Lab/motifs/Plot_Violin_Distance_Pathway_vs_Global.R")
p
source("~/Documents/Research/Elowitz Lab/motifs/Plot_Violin_Distance_Pathway_vs_Global.R")
p
source("~/Documents/Research/Elowitz Lab/motifs/Plot_Violin_Distance_Pathway_vs_Global.R")
p
set.seed(17)
source("./scripts/analysis/imports_new.R")
## Change these variables
filename = "tgfb_trial" # how name is appended to files for pathway
## Directories for the files
output_dir = paste("./scripts/analysis/outputs/", filename, "_analysis/", filename, sep = "")
fig_dir = "./scripts/figures/"
pathway_df = read.csv('./data/raw_data/pathbank/pathway_df.csv', row.names = 1)
pathway_name =  'Tgf-beta family receptors' # tgfb pathway name
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
min_genes_pathway = 2 # tgfb min. number of genes expressed
min_expr_threshold = 0.2 # tgfb minimum expression threshold for gene to be on
optimal_k_pathway = 30 # optimal pathway components, computed from z-score
diverse_quantile = 0.9
## Returns MinMax normalized counts along with metadata at specified saturating quantile.
normalizedDevel <- function(seurat_obj = c(),    # Which Seurat object to use
pathway_genes = c(),           # List of pathway genes
sat_val = 0.99,                # Saturating quantile
fill_zero_rows = F             # If a gene has all 0's, fill with very small number
){
# Get the log norm gene counts and annotations
data_frame <- makeMainDataFrame(pathway_genes,
seurat_obj)
if(!'cell_id' %in% names(seurat_obj@meta.data))
data_frame %>% mutate(cell_id = paste(global_cluster,
dataset,
sep = "_")
) -> data_frame
# Get dataframe of only gene expression values in the subset of cell states we want
x = data_frame[, pathway_genes]
# Compute the saturating values at a specified sat_val quantile
max_sat_gene = apply(x, 2, quantile, sat_val) # starts from x
# If there are genes that saturate to a value of 0, then replace the saturating value with the max. value of its expression
if(sum(max_sat_gene == 0) > 0){
max_val_gene = apply(x, 2, max) # starts from x
max_sat_gene[max_sat_gene == 0] <- max_val_gene[max_sat_gene == 0]
}
# Actually saturate the values now
for(s in 1:dim(x)[2])
x[which(x[, s] > max_sat_gene[s]), s]<- max_sat_gene[s]
# Apply MinMax Scaling to scale values between 0 to 1
x <- minMaxNorm(x)
# We can't do cosine distance on all zero genes so we just fill these with a very small value if we want
if(fill_zero_rows)
x[x == 0] = 10^-10
# Modify the dataframe with the metadata to now have the MinMax scaled, saturated counts
data_frame[, pathway_genes] <- x
data.frame[,pathway_genes] <- randomizeColumns(df = data.frame,
pathway_genes=pathway_genes)
row.names(data_frame) <- data_frame$global_cluster # Reset column names
return(data_frame)
}
## Make a plot of k_opt profiles for cell types with pathway "ON
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
## Computing the optimal silhouette score
silh_plt = silhouettePlot(pathway_genes = pathway_genes,
min_genes_on = min_genes_on,
min_expr = min_expr,
n_bootstraps = 100,
seurat_obj = master_seurat,
max_k = 5)
silh_z_plt <- silhouette_zscore(silh_result = silh_plt,
min_expr = min_expr,
x_offset = 6,
max.y = 0.43,
min.y = 0.17,
k_max = 200
)
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Plots_Distance_Tgfb_Scrambled.R")
set.seed(17)
source("./scripts/analysis/imports_new.R")
## Change these variables
filename = "tgfb_trial" # how name is appended to files for pathway
## Directories for the files
output_dir = paste("./scripts/analysis/outputs/", filename, "_analysis/", filename, sep = "")
fig_dir = "./scripts/figures/"
pathway_df = read.csv('./data/raw_data/pathbank/pathway_df.csv', row.names = 1)
pathway_name =  'Tgf-beta family receptors' # tgfb pathway name
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
min_genes_pathway = 2 # tgfb min. number of genes expressed
min_expr_threshold = 0.2 # tgfb minimum expression threshold for gene to be on
optimal_k_pathway = 30 # optimal pathway components, computed from z-score
diverse_quantile = 0.9
## Returns MinMax normalized counts along with metadata at specified saturating quantile.
normalizedDevel <- function(seurat_obj = c(),    # Which Seurat object to use
pathway_genes = c(),           # List of pathway genes
sat_val = 0.99,                # Saturating quantile
fill_zero_rows = F             # If a gene has all 0's, fill with very small number
){
# Get the log norm gene counts and annotations
data_frame <- makeMainDataFrame(pathway_genes,
seurat_obj)
if(!'cell_id' %in% names(seurat_obj@meta.data))
data_frame %>% mutate(cell_id = paste(global_cluster,
dataset,
sep = "_")
) -> data_frame
# Get dataframe of only gene expression values in the subset of cell states we want
x = data_frame[, pathway_genes]
# Compute the saturating values at a specified sat_val quantile
max_sat_gene = apply(x, 2, quantile, sat_val) # starts from x
# If there are genes that saturate to a value of 0, then replace the saturating value with the max. value of its expression
if(sum(max_sat_gene == 0) > 0){
max_val_gene = apply(x, 2, max) # starts from x
max_sat_gene[max_sat_gene == 0] <- max_val_gene[max_sat_gene == 0]
}
# Actually saturate the values now
for(s in 1:dim(x)[2])
x[which(x[, s] > max_sat_gene[s]), s]<- max_sat_gene[s]
# Apply MinMax Scaling to scale values between 0 to 1
x <- minMaxNorm(x)
# We can't do cosine distance on all zero genes so we just fill these with a very small value if we want
if(fill_zero_rows)
x[x == 0] = 10^-10
# Modify the dataframe with the metadata to now have the MinMax scaled, saturated counts
data_frame[, pathway_genes] <- x
data.frame[,pathway_genes] <- randomizeColumns(df = data_frame,
pathway_genes=pathway_genes)
row.names(data_frame) <- data_frame$global_cluster # Reset column names
return(data_frame)
}
## Make a plot of k_opt profiles for cell types with pathway "ON
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
## Computing the optimal silhouette score
silh_plt = silhouettePlot(pathway_genes = pathway_genes,
min_genes_on = min_genes_on,
min_expr = min_expr,
n_bootstraps = 100,
seurat_obj = master_seurat,
max_k = 5)
silh_z_plt <- silhouette_zscore(silh_result = silh_plt,
min_expr = min_expr,
x_offset = 6,
max.y = 0.43,
min.y = 0.17,
k_max = 200
)
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Plots_Distance_Tgfb_Scrambled.R")
pathway_genes
sat_val = 0.99
fill_zero_rows=F
# Get the log norm gene counts and annotations
data_frame <- makeMainDataFrame(pathway_genes,
seurat_obj)
if(!'cell_id' %in% names(seurat_obj@meta.data))
data_frame %>% mutate(cell_id = paste(global_cluster,
dataset,
sep = "_")
) -> data_frame
# Get dataframe of only gene expression values in the subset of cell states we want
x = data_frame[, pathway_genes]
# Compute the saturating values at a specified sat_val quantile
max_sat_gene = apply(x, 2, quantile, sat_val) # starts from x
# If there are genes that saturate to a value of 0, then replace the saturating value with the max. value of its expression
if(sum(max_sat_gene == 0) > 0){
max_val_gene = apply(x, 2, max) # starts from x
max_sat_gene[max_sat_gene == 0] <- max_val_gene[max_sat_gene == 0]
}
# Actually saturate the values now
for(s in 1:dim(x)[2])
x[which(x[, s] > max_sat_gene[s]), s]<- max_sat_gene[s]
# Apply MinMax Scaling to scale values between 0 to 1
x <- minMaxNorm(x)
# We can't do cosine distance on all zero genes so we just fill these with a very small value if we want
if(fill_zero_rows)
x[x == 0] = 10^-10
# Modify the dataframe with the metadata to now have the MinMax scaled, saturated counts
data_frame[, pathway_genes] <- x
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Plots_Distance_Tgfb_Scrambled.R")
silh_z_plt
## Computing the optimal silhouette score
silh_plt = silhouettePlot(pathway_genes = pathway_genes,
min_genes_on = min_genes_on,
min_expr = min_expr,
n_bootstraps = 5,
seurat_obj = master_seurat,
max_k = 200)
silh_z_plt <- silhouette_zscore(silh_result = silh_plt,
min_expr = min_expr,
x_offset = 6,
max.y = 0.43,
min.y = 0.17,
k_max = 200
)
optimal_k_pathway <- c()
silh_z_plt
silh_z_plt[[2]]
silh_z_plt
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Plot_Distance_Pathway_vs_Global_by_dataset.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Plot_Distance_Pathway_vs_Global_by_dataset.R")
pathway_na
pathway_name
j
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Plot_Distance_Pathway_vs_Global_by_dataset.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Plot_Distance_Pathway_vs_Global_by_dataset.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Plot_Distance_Pathway_vs_Global_by_dataset.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Plot_Distance_Pathway_vs_Global_by_dataset.R")
j
pipe_run$matrix %>% dim()
pipe_run$data_frame %>% dim()
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Plot_Distance_Pathway_vs_Global_by_dataset.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Plot_Distance_Pathway_vs_Global_by_dataset.R")
source("~/Documents/Research/Elowitz Lab/motifs/scripts/analysis/Plot_Distance_Pathway_vs_Global_by_dataset.R")
source("~/Documents/Research/Elowitz Lab/motifs/Plot_Violin_Distance_Pathway_vs_Global.R")
p
global_dist_df %>%
ggplot(aes(x=global_dist)) +
geom_histogram(aes(x=global_dist,y=after_stat(density))) +
geom_density() -> p
p
source("./scripts/analysis/imports_new.R")
pathway_name =  "Tgf-beta family receptors" # tgfb pathway name
pathway_genes = genesPathway(pathway_name = pathway_name,
pathway_df = pathway_df,
seurat_obj = master_seurat)
min_genes_pathway = 2 # tgfb min. number of genes expressed
min_expr_threshold = 0.2 # tgfb minimum expression threshold for gene to be on
optimal_k_pathway = 30 # optimal pathway components, computed from z-score
diverse_quantile = 0.9
dist_metric = "cosine"
n_pcs = 1:20
seurat_obj = master_seurat
## To generate a DataFrame with the gene exp. of cell states with pathway "ON"
pipe_run <- quickPipeline(seurat_obj = master_seurat,
pathway_genes = pathway_genes,
k_final = optimal_k_pathway,
min_genes_on = min_genes_pathway,
min_expr = min_expr_threshold
)
# PAHTWAY DISTANCE: cosine distance in pathway gene exp.
pathway_dist = dist.cosine(as.matrix(pipe_run$data_frame[pathway_genes]))
pathway_dist_df <- data.frame(t(combn(pipe_run$data_frame$cell_id,2)),
as.numeric(pathway_dist))
colnames(pathway_dist_df) <- c("cell_id_1", "cell_id_2", "pathway_dist")
# GLOBAL DISTANCE: euclidean or cosine distance in PCA space
global_coords = Embeddings(seurat_obj, reduction='pca')
global_coords = global_coords[pipe_run$data_frame$cell_id, n_pcs] # already set row names as cell id
global_dist = dist(global_coords)
global_dist_df <- data.frame(t(combn(rownames(global_coords),2)),
as.numeric(global_dist))
colnames(global_dist_df) <- c("cell_id_1", "cell_id_2", "global_dist")
global_dist_df %>%
ggplot(aes(x=global_dist)) +
geom_histogram(aes(x=global_dist,y=after_stat(density))) +
geom_density() -> p
p
p <- p + geom_vline(botcounts)
botcounts
p <- p + geom_vline(append(c(0), botcounts))
p
p <- p + geom_vline(xintercept = append(c(0), botcounts))
p
source("~/Documents/Research/Elowitz Lab/motifs/Plot_Violin_Distance_Pathway_vs_Global.R")
source("~/Documents/Research/Elowitz Lab/motifs/Plot_Violin_Distance_Pathway_vs_Global.R")
source("~/Documents/Research/Elowitz Lab/motifs/Plot_Violin_Distance_Pathway_vs_Global.R")
source("~/Documents/Research/Elowitz Lab/motifs/Plot_Violin_Distance_Pathway_vs_Global.R")
source("~/Documents/Research/Elowitz Lab/motifs/Plot_Violin_Distance_Pathway_vs_Global.R")
help("sign")
diff(sign(c(diff(pg$data[[2]]$y))))==2,F
diff(sign(c(diff(pg$data[[2]]$y))))==2,F)
pathway_df[pathway_df$pathway==                 'Notch receptors, Dll ligands, and Fringe proteins',
,]
library(shiny); runApp('html_script.R')
runApp('html_script.R')
runApp('html_script.R')
runApp('html_script.R')
library(shiny); runApp('html_script_new.R')
runApp('html_script_new.R')
runApp('html_script_new.R')
