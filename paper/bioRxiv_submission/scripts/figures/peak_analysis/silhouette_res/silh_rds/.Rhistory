return(list(fig, df_plot_labeled ) )
}
res = plotly_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.2, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F)
res[[1]]
data_real_plot %>% dplyr::filter(name =="Leucine stimulation on insulin signaling")
data_real_plot %>% head()
data_real_plot %>% dplyr::filter(pathway =="Leucine stimulation on insulin signaling")
data_real_plot %>% group_by(pathway) %>% count()
data_real_plot %>% group_by(pathway) %>% count()  %>% as.data.frame()
data_real_plot %>% group_by(pathway) %>% count()  %>% dplyr::filter(grepl('insulin',patwhay) )
data_real_plot %>% group_by(pathway) %>% count()
data_real_plot %>% group_by(pathway) %>% count()  %>% dplyr::filter(grepl('sulin',pathway))
data_real_plot %>% dplyr::filter(pathway=='Leucine Stimulation on Insulin Signaling')
df_plot_labeled
dispersion_stats %>% head()
dispersion_stats %>% group_by(pathway_name ) %>% count()
dispersion_stats %>% group_by(pathway_name ) %>% summarise(k = n() )
data_real_plot %>% head
data_real_plot %>% rename(pathway_name = pathway) %>% group_by(pathway_name) %>% summarise(n_genes = n() )
dispersion_stats %>% group_by(pathway_name ) %>% summarise(k = n() )
dispersion_stats %>% group_by(pathway_name ) %>% summarise(k = n() ) %>% left_join(data_real_plot %>% rename(pathway_name = pathway) %>% group_by(pathway_name) %>% summarise(n_genes = n() ), by ="pathway_name")
dispersion_stats %>% group_by(pathway_name ) %>% summarise(k = n() ) %>% left_join(data_real_plot %>% rename(pathway_name = pathway) %>% group_by(pathway_name) %>% summarise(n_genes = n() ), by ="pathway_name") -> pathway_meta
dispersion_stats %>% group_by(pathway_name ) %>% summarise(k = n() ) %>%
left_join(data_real_plot %>% rename(pathway_name = pathway) %>%
group_by(pathway_name) %>% summarise(n_genes = n() ), by ="pathway_name") -> pathway_meta
pathway_meta %>% ggplot(aes(x = k, y=n_genes)) + geom_point()
df_plot_labeled
df_plot_labeled %>% left_join(data_real_plot %>% rename(pathway_name = pathway) %>% group_by(pathway_name) %>% summarise(n_genes = n() ) , by ="pathway_name")
df_plot_labeled %>% left_join(data_real_plot %>% rename(pathway_name = pathway) %>% group_by(pathway_name) %>% summarise(n_genes = n() ) , by ="pathway_name") %>% mutate(k_gene_ratio = k/n_genes) -> df_plot_labeled
res = plotly_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.2, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F)
res[[1]]
df_plot_labeled <- res[[2]]
df_plot_labeled %>% left_join(data_real_plot %>% rename(pathway_name = pathway) %>% group_by(pathway_name) %>% summarise(n_genes = n() ) , by ="pathway_name") %>% mutate(k_gene_ratio = k/n_genes) -> df_plot_labeled
df_plot_labeled
df_plot_labeled %>%
ggplot(aes(x = median_disp, y = k, size = silh, label = pathway_label, color = pathway_class)) + geom_point() + geom_text()
df_plot_labeled %>% names
df_plot_labeled %>%
ggplot(aes(x = median_disp, y = k_gene_ratio, size = silh, label = pathway_label, color = pathway_class)) + geom_point() + geom_text()
dev.off()
plotly_dispersion_distribution <- function(
dispersion_stats = data.frame() ,
labels_idx = c(9, 10, 12,13,14),
min_silh = 0.1,                   # threshold for considering only clusters with high silhouette score
min_n_cluster = 1,                # do not include clusters with only one cell type
df_kvals = data.frame(),           # data.frame with optimal number of clusters
use_mean = T
){
#min_silh = 0.1 # only consider clusters with positive silhouette score -- otherwise we could bias the dispersion calculations to bad clusters
df_plot <- dispersion_stats %>%
dplyr::filter(mean_silh > min_silh, n> min_n_cluster) %>%
group_by(pathway_name) %>%
summarise(mean_disp = mean(diversity),
silh = mean(mean_silh),
median_disp = median(diversity) , n_clusters = n() )
select_pathways = pathway_list[labels_idx ]
df_plot_labeled <- df_plot %>% left_join(df_kvals %>% rename(pathway_name = name ), by ="pathway_name") %>%
mutate( pathway_label  = ifelse(pathway_name %in% select_pathways,str_trunc(pathway_name, 8) ,"")) %>%
dplyr::filter(k > 3)
df_plot_labeled <- df_plot_labeled %>%
mutate(pathway_class = ifelse(grepl("bolis|ycle|Gluconeogenesis|Fructose|Lysine|Pentose|Fatty Acids", pathway_name),
"metabolism","signaling/protein") )
# LPA pathway appears 3 times
df_plot_labeled <- df_plot_labeled %>% dplyr::filter(!grepl(pattern = "LPA2|LPA4", pathway_name))
# merge with number of gnees
df_plot_labeled %>% left_join(data_real_plot %>% rename(pathway_name = pathway) %>%
group_by(pathway_name) %>% summarise(n_genes = n() ) , by ="pathway_name") %>%
mutate(k_gene_ratio = k/n_genes) -> df_plot_labeled
fig <- plot_ly(data = df_plot_labeled, x = ~median_disp, y = ~k_gene_ratio, color = ~pathway_class,
colors = 'Set1',
text = df_plot_labeled$pathway_name,
hoverinfo = 'text',
marker = list(size = 10,
#color = 'rgba(255, 182, 193, .9)',
line = list(#color = 'rgba(152, 0, 0, .8)',
width = 2)))
return(list(fig, df_plot_labeled ) )
}
res = plotly_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.2, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F)
res[[1]]
# make statistics
plot_dispersion_distribution <- function(
dispersion_stats = data.frame() ,
labels_idx = c(9, 10, 12,13,14),
min_silh = 0.1,                   # threshold for considering only clusters with high silhouette score
min_n_cluster = 1,                # do not include clusters with only one cell type
df_kvals = data.frame(),           # data.frame with optimal number of clusters
use_mean = T
){
#min_silh = 0.1 # only consider clusters with positive silhouette score -- otherwise we could bias the dispersion calculations to bad clusters
df_plot <- dispersion_stats %>%
dplyr::filter(mean_silh > min_silh, n> min_n_cluster) %>%
group_by(pathway_name) %>%
summarise(mean_disp = mean(diversity),
silh = mean(mean_silh),
median_disp = median(diversity) , n_clusters = n() )
select_pathways = pathway_list[labels_idx ]
df_plot_labeled <- df_plot %>% left_join(df_kvals %>% rename(pathway_name = name ), by ="pathway_name") %>%
mutate( pathway_label  = ifelse(pathway_name %in% select_pathways,str_trunc(pathway_name, 8) ,"")) %>%
dplyr::filter(k > 3)
df_plot_labeled <- df_plot_labeled %>%
mutate(pathway_class = ifelse(grepl("bolis|ycle|Gluconeogenesis|Fructose|Lysine|Pentose|Fatty Acids", pathway_name),
"metabolism","signaling/protein") )
# LPA pathway appears 3 times
df_plot_labeled <- df_plot_labeled %>% dplyr::filter(!grepl(pattern = "LPA2|LPA4", pathway_name))
# merge with number of gnees
df_plot_labeled %>% left_join(data_real_plot %>% rename(pathway_name = pathway) %>%
group_by(pathway_name) %>% summarise(n_genes = n() ) , by ="pathway_name") %>%
mutate(k_gene_ratio = k/n_genes) -> df_plot_labeled
if(use_mean){
g <- df_plot_labeled %>%
ggplot(aes(x = mean_disp, y = k, size = silh, label = pathway_label, color = pathway_class)) + geom_point() + geom_text()
}else{
g <- df_plot_labeled %>%
ggplot(aes(x = median_disp, y = k, size = silh, label = pathway_label, color = pathway_class)) + geom_point() + geom_text()
}
return(list(g, df_plot_labeled ) )
}
res = plotl_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.2, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.2, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F)
res[[1]]
dev.off()
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.2, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F)
res[[1]]
plot_dispersion_distribution <- function(
dispersion_stats = data.frame() ,
labels_idx = c(9, 10, 12,13,14),
min_silh = 0.1,                   # threshold for considering only clusters with high silhouette score
min_n_cluster = 1,                # do not include clusters with only one cell type
df_kvals = data.frame(),           # data.frame with optimal number of clusters
use_mean = T
){
#min_silh = 0.1 # only consider clusters with positive silhouette score -- otherwise we could bias the dispersion calculations to bad clusters
df_plot <- dispersion_stats %>%
dplyr::filter(mean_silh > min_silh, n> min_n_cluster) %>%
group_by(pathway_name) %>%
summarise(mean_disp = mean(diversity),
silh = mean(mean_silh),
median_disp = median(diversity) , n_clusters = n() )
select_pathways = pathway_list[labels_idx ]
df_plot_labeled <- df_plot %>% left_join(df_kvals %>% rename(pathway_name = name ), by ="pathway_name") %>%
mutate( pathway_label  = ifelse(pathway_name %in% select_pathways,str_trunc(pathway_name, 8) ,"")) %>%
dplyr::filter(k > 3)
df_plot_labeled <- df_plot_labeled %>%
mutate(pathway_class = ifelse(grepl("bolis|ycle|Gluconeogenesis|Fructose|Lysine|Pentose|Fatty Acids", pathway_name),
"metabolism","signaling/protein") )
# LPA pathway appears 3 times
df_plot_labeled <- df_plot_labeled %>% dplyr::filter(!grepl(pattern = "LPA2|LPA4", pathway_name))
# merge with number of gnees
df_plot_labeled %>% left_join(data_real_plot %>% rename(pathway_name = pathway) %>%
group_by(pathway_name) %>% summarise(n_genes = n() ) , by ="pathway_name") %>%
mutate(k_gene_ratio = k/n_genes) -> df_plot_labeled
if(use_mean){
g <- df_plot_labeled %>%
ggplot(aes(x = mean_disp, y = k_gene_ratio, size = silh, label = pathway_label, color = pathway_class)) + geom_point() + geom_text()
}else{
g <- df_plot_labeled %>%
ggplot(aes(x = median_disp, y = k_gene_ratio, size = silh, label = pathway_label, color = pathway_class)) + geom_point() + geom_text()
}
return(list(g, df_plot_labeled ) )
}
dev.off()
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.2, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.1, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.2, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 3,  df_kvals = df_kvals , use_mean = F)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.1, min_n_cluster = 3,  df_kvals = df_kvals , use_mean = F)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.1, min_n_cluster = 3,  df_kvals = df_kvals , use_mean = T)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.2, min_n_cluster = 3,  df_kvals = df_kvals , use_mean = T)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 3,  df_kvals = df_kvals , use_mean = T)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 3,  df_kvals = df_kvals , use_mean = F)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.2, min_n_cluster = 3,  df_kvals = df_kvals , use_mean = F)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 3,  df_kvals = df_kvals , use_mean = F)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F)
res[[1]]
res = plotly_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F)
res[[1]]
res[[2]] %>% head()
res[[2]] %>% arrange(desc(n_genes))
res[[2]] %>% arrange(desc(n_genes)) %>% as.data.frame %>% head()
dev.off()
# make statistics
plot_dispersion_distribution <- function(
dispersion_stats = data.frame() ,
labels_idx = c(9, 10, 12,13,14),
min_silh = 0.1,                   # threshold for considering only clusters with high silhouette score
min_n_cluster = 1,                # do not include clusters with only one cell type
df_kvals = data.frame(),           # data.frame with optimal number of clusters
use_mean = T,
include_metabolic = T
){
#min_silh = 0.1 # only consider clusters with positive silhouette score -- otherwise we could bias the dispersion calculations to bad clusters
df_plot <- dispersion_stats %>%
dplyr::filter(mean_silh > min_silh, n> min_n_cluster) %>%
group_by(pathway_name) %>%
summarise(mean_disp = mean(diversity),
silh = mean(mean_silh),
median_disp = median(diversity) , n_clusters = n() )
select_pathways = pathway_list[labels_idx ]
df_plot_labeled <- df_plot %>% left_join(df_kvals %>% rename(pathway_name = name ), by ="pathway_name") %>%
mutate( pathway_label  = ifelse(pathway_name %in% select_pathways,str_trunc(pathway_name, 8) ,"")) %>%
dplyr::filter(k > 3)
df_plot_labeled <- df_plot_labeled %>%
mutate(pathway_class = ifelse(grepl("bolis|ycle|Gluconeogenesis|Fructose|Lysine|Pentose|Fatty Acids", pathway_name),
"metabolism","signaling/protein") )
# LPA pathway appears 3 times
df_plot_labeled <- df_plot_labeled %>% dplyr::filter(!grepl(pattern = "LPA2|LPA4", pathway_name))
# merge with number of gnees
df_plot_labeled %>% left_join(data_real_plot %>% rename(pathway_name = pathway) %>%
group_by(pathway_name) %>% summarise(n_genes = n() ) , by ="pathway_name") %>%
mutate(k_gene_ratio = k/n_genes) -> df_plot_labeled
if(!include_metabolic)
df_plot_labeled %>% dplyr::filter(pathway_class != 'metabolism')
if(use_mean){
g <- df_plot_labeled %>%
ggplot(aes(x = mean_disp, y = k_gene_ratio, size = silh, label = pathway_label, color = pathway_class)) + geom_point() + geom_text()
}else{
g <- df_plot_labeled %>%
ggplot(aes(x = median_disp, y = k_gene_ratio, size = silh, label = pathway_label, color = pathway_class)) + geom_point() + geom_text()
}
return(list(g, df_plot_labeled ) )
}
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F)
res[[1]]
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F, include_metabolic = F)
res[[1]]
res[[2]] %>% head()
res[[2]]$pathway_class %>% unique
# make statistics
plot_dispersion_distribution <- function(
dispersion_stats = data.frame() ,
labels_idx = c(9, 10, 12,13,14),
min_silh = 0.1,                   # threshold for considering only clusters with high silhouette score
min_n_cluster = 1,                # do not include clusters with only one cell type
df_kvals = data.frame(),           # data.frame with optimal number of clusters
use_mean = T,
include_metabolic = T
){
#min_silh = 0.1 # only consider clusters with positive silhouette score -- otherwise we could bias the dispersion calculations to bad clusters
df_plot <- dispersion_stats %>%
dplyr::filter(mean_silh > min_silh, n> min_n_cluster) %>%
group_by(pathway_name) %>%
summarise(mean_disp = mean(diversity),
silh = mean(mean_silh),
median_disp = median(diversity) , n_clusters = n() )
select_pathways = pathway_list[labels_idx ]
df_plot_labeled <- df_plot %>% left_join(df_kvals %>% rename(pathway_name = name ), by ="pathway_name") %>%
mutate( pathway_label  = ifelse(pathway_name %in% select_pathways,str_trunc(pathway_name, 8) ,"")) %>%
dplyr::filter(k > 3)
df_plot_labeled <- df_plot_labeled %>%
mutate(pathway_class = ifelse(grepl("bolis|ycle|Gluconeogenesis|Fructose|Lysine|Pentose|Fatty Acids", pathway_name),
"metabolism","signaling/protein") )
# LPA pathway appears 3 times
df_plot_labeled <- df_plot_labeled %>% dplyr::filter(!grepl(pattern = "LPA2|LPA4", pathway_name))
# merge with number of gnees
df_plot_labeled %>% left_join(data_real_plot %>% rename(pathway_name = pathway) %>%
group_by(pathway_name) %>% summarise(n_genes = n() ) , by ="pathway_name") %>%
mutate(k_gene_ratio = k/n_genes) -> df_plot_labeled
if(!include_metabolic)
df_plot_labeled <- df_plot_labeled %>% dplyr::filter(pathway_class != 'metabolism')
if(use_mean){
g <- df_plot_labeled %>%
ggplot(aes(x = mean_disp, y = k_gene_ratio, size = silh, label = pathway_label, color = pathway_class)) + geom_point() + geom_text()
}else{
g <- df_plot_labeled %>%
ggplot(aes(x = median_disp, y = k_gene_ratio, size = silh, label = pathway_label, color = pathway_class)) + geom_point() + geom_text()
}
return(list(g, df_plot_labeled ) )
}
dev.off()
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F, include_metabolic = F)
res[[1]]
# make statistics
plot_dispersion_distribution <- function(
dispersion_stats = data.frame() ,
labels_idx = c(9, 10, 12,13,14),
min_silh = 0.1,                   # threshold for considering only clusters with high silhouette score
min_n_cluster = 1,                # do not include clusters with only one cell type
df_kvals = data.frame(),           # data.frame with optimal number of clusters
use_mean = T,
include_metabolic = T
){
#min_silh = 0.1 # only consider clusters with positive silhouette score -- otherwise we could bias the dispersion calculations to bad clusters
df_plot <- dispersion_stats %>%
dplyr::filter(mean_silh > min_silh, n> min_n_cluster) %>%
group_by(pathway_name) %>%
summarise(mean_disp = mean(diversity),
silh = mean(mean_silh),
median_disp = median(diversity) , n_clusters = n() )
select_pathways = pathway_list[labels_idx ]
df_plot_labeled <- df_plot %>% left_join(df_kvals %>% rename(pathway_name = name ), by ="pathway_name") %>%
mutate( pathway_label  = ifelse(pathway_name %in% select_pathways,str_trunc(pathway_name, 8) ,"")) %>%
dplyr::filter(k > 3)
df_plot_labeled <- df_plot_labeled %>%
mutate(pathway_class = ifelse(grepl("bolis|ycle|Gluconeogenesis|Fructose|Lysine|Pentose|Fatty Acids", pathway_name),
"metabolism","signaling/protein") )
# LPA pathway appears 3 times
df_plot_labeled <- df_plot_labeled %>% dplyr::filter(!grepl(pattern = "LPA2|LPA4", pathway_name))
# merge with number of gnees
df_plot_labeled %>% left_join(data_real_plot %>% rename(pathway_name = pathway) %>%
group_by(pathway_name) %>% summarise(n_genes = n() ) , by ="pathway_name") %>%
mutate(k_gene_ratio = k/n_genes) -> df_plot_labeled
if(!include_metabolic)
df_plot_labeled <- df_plot_labeled %>% dplyr::filter(pathway_class != 'metabolism')
if(use_mean){
g <- df_plot_labeled %>%
ggplot(aes(x = mean_disp, y = k_gene_ratio, size = silh, label = pathway_label, color = pathway_class)) + geom_point() + geom_text()
}else{
g <- df_plot_labeled %>%
ggplot(aes(x = median_disp, y = k_gene_ratio, size = silh, label = pathway_label, color = pathway_class)) +
geom_point() + geom_text()  + scale_fill_brewer(palette = 'Set2')
}
return(list(g, df_plot_labeled ) )
}
dev.off()
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F, include_metabolic = F)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F, include_metabolic = T)
res[[1]]
# make statistics
plot_dispersion_distribution <- function(
dispersion_stats = data.frame() ,
labels_idx = c(9, 10, 12,13,14),
min_silh = 0.1,                   # threshold for considering only clusters with high silhouette score
min_n_cluster = 1,                # do not include clusters with only one cell type
df_kvals = data.frame(),           # data.frame with optimal number of clusters
use_mean = T,
include_metabolic = T,
use_palette  = 'Set2'
){
#min_silh = 0.1 # only consider clusters with positive silhouette score -- otherwise we could bias the dispersion calculations to bad clusters
df_plot <- dispersion_stats %>%
dplyr::filter(mean_silh > min_silh, n> min_n_cluster) %>%
group_by(pathway_name) %>%
summarise(mean_disp = mean(diversity),
silh = mean(mean_silh),
median_disp = median(diversity) , n_clusters = n() )
select_pathways = pathway_list[labels_idx ]
df_plot_labeled <- df_plot %>% left_join(df_kvals %>% rename(pathway_name = name ), by ="pathway_name") %>%
mutate( pathway_label  = ifelse(pathway_name %in% select_pathways,str_trunc(pathway_name, 8) ,"")) %>%
dplyr::filter(k > 3)
df_plot_labeled <- df_plot_labeled %>%
mutate(pathway_class = ifelse(grepl("bolis|ycle|Gluconeogenesis|Fructose|Lysine|Pentose|Fatty Acids", pathway_name),
"metabolism","signaling/protein") )
# LPA pathway appears 3 times
df_plot_labeled <- df_plot_labeled %>% dplyr::filter(!grepl(pattern = "LPA2|LPA4", pathway_name))
# merge with number of gnees
df_plot_labeled %>% left_join(data_real_plot %>% rename(pathway_name = pathway) %>%
group_by(pathway_name) %>% summarise(n_genes = n() ) , by ="pathway_name") %>%
mutate(k_gene_ratio = k/n_genes) -> df_plot_labeled
if(!include_metabolic)
df_plot_labeled <- df_plot_labeled %>% dplyr::filter(pathway_class != 'metabolism')
if(use_mean){
g <- df_plot_labeled %>%
ggplot(aes(x = mean_disp, y = k_gene_ratio, size = silh, label = pathway_label, color = pathway_class)) + geom_point() + geom_text()
}else{
g <- df_plot_labeled %>%
ggplot(aes(x = median_disp, y = k_gene_ratio, size = silh, label = pathway_label, color = pathway_class)) +
geom_point() + geom_text()  + scale_color_brewer(palette = use_palette)
}
return(list(g, df_plot_labeled ) )
}
dev.off()
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F, include_metabolic = T)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F, include_metabolic = F)
res[[1]]
library(ggrepel)
dev.off()
plot_dispersion_distribution <- function(
dispersion_stats = data.frame() ,
labels_idx = c(9, 10, 12,13,14),
min_silh = 0.1,                   # threshold for considering only clusters with high silhouette score
min_n_cluster = 1,                # do not include clusters with only one cell type
df_kvals = data.frame(),           # data.frame with optimal number of clusters
use_mean = T,
include_metabolic = T,
use_palette  = 'Set2'
){
#min_silh = 0.1 # only consider clusters with positive silhouette score -- otherwise we could bias the dispersion calculations to bad clusters
df_plot <- dispersion_stats %>%
dplyr::filter(mean_silh > min_silh, n> min_n_cluster) %>%
group_by(pathway_name) %>%
summarise(mean_disp = mean(diversity),
silh = mean(mean_silh),
median_disp = median(diversity) , n_clusters = n() )
select_pathways = pathway_list[labels_idx ]
df_plot_labeled <- df_plot %>% left_join(df_kvals %>% rename(pathway_name = name ), by ="pathway_name") %>%
mutate( pathway_label  = ifelse(pathway_name %in% select_pathways,str_trunc(pathway_name, 8) ,"")) %>%
dplyr::filter(k > 3)
df_plot_labeled <- df_plot_labeled %>%
mutate(pathway_class = ifelse(grepl("bolis|ycle|Gluconeogenesis|Fructose|Lysine|Pentose|Fatty Acids", pathway_name),
"metabolism","signaling/protein") )
# LPA pathway appears 3 times
df_plot_labeled <- df_plot_labeled %>% dplyr::filter(!grepl(pattern = "LPA2|LPA4", pathway_name))
# merge with number of gnees
df_plot_labeled %>% left_join(data_real_plot %>% rename(pathway_name = pathway) %>%
group_by(pathway_name) %>% summarise(n_genes = n() ) , by ="pathway_name") %>%
mutate(k_gene_ratio = k/n_genes) -> df_plot_labeled
if(!include_metabolic)
df_plot_labeled <- df_plot_labeled %>% dplyr::filter(pathway_class != 'metabolism')
if(use_mean){
g <- df_plot_labeled %>%
ggplot(aes(x = mean_disp, y = k_gene_ratio, size = silh, label = pathway_label, color = pathway_class)) + geom_point() + geom_text()
}else{
g <- df_plot_labeled %>%
ggplot(aes(x = median_disp, y = k_gene_ratio, size = silh, label = pathway_label, color = pathway_class)) +
geom_point() + geom_repel( )  + scale_color_brewer(palette = use_palette)
}
return(list(g, df_plot_labeled ) )
}
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F, include_metabolic = F)
res[[1]]
dev.off()
plot_dispersion_distribution <- function(
dispersion_stats = data.frame() ,
labels_idx = c(9, 10, 12,13,14),
min_silh = 0.1,                   # threshold for considering only clusters with high silhouette score
min_n_cluster = 1,                # do not include clusters with only one cell type
df_kvals = data.frame(),           # data.frame with optimal number of clusters
use_mean = T,
include_metabolic = T,
use_palette  = 'Set2'
){
#min_silh = 0.1 # only consider clusters with positive silhouette score -- otherwise we could bias the dispersion calculations to bad clusters
df_plot <- dispersion_stats %>%
dplyr::filter(mean_silh > min_silh, n> min_n_cluster) %>%
group_by(pathway_name) %>%
summarise(mean_disp = mean(diversity),
silh = mean(mean_silh),
median_disp = median(diversity) , n_clusters = n() )
select_pathways = pathway_list[labels_idx ]
df_plot_labeled <- df_plot %>% left_join(df_kvals %>% rename(pathway_name = name ), by ="pathway_name") %>%
mutate( pathway_label  = ifelse(pathway_name %in% select_pathways,str_trunc(pathway_name, 8) ,"")) %>%
dplyr::filter(k > 3)
df_plot_labeled <- df_plot_labeled %>%
mutate(pathway_class = ifelse(grepl("bolis|ycle|Gluconeogenesis|Fructose|Lysine|Pentose|Fatty Acids", pathway_name),
"metabolism","signaling/protein") )
# LPA pathway appears 3 times
df_plot_labeled <- df_plot_labeled %>% dplyr::filter(!grepl(pattern = "LPA2|LPA4", pathway_name))
# merge with number of gnees
df_plot_labeled %>% left_join(data_real_plot %>% rename(pathway_name = pathway) %>%
group_by(pathway_name) %>% summarise(n_genes = n() ) , by ="pathway_name") %>%
mutate(k_gene_ratio = k/n_genes) -> df_plot_labeled
if(!include_metabolic)
df_plot_labeled <- df_plot_labeled %>% dplyr::filter(pathway_class != 'metabolism')
if(use_mean){
g <- df_plot_labeled %>%
ggplot(aes(x = mean_disp, y = k_gene_ratio, size = silh, label = pathway_label, color = pathway_class)) + geom_point() + geom_text()
}else{
g <- df_plot_labeled %>%
ggplot(aes(x = median_disp, y = k_gene_ratio, size = silh, label = pathway_label, color = pathway_class)) +
geom_point() + geom_label_repel( )  + scale_color_brewer(palette = use_palette)
}
return(list(g, df_plot_labeled ) )
}
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F, include_metabolic = F)
res[[1]]
res[[1]] + theme(text = element_text(size = 20))
res[[1]] + theme(text = element_text(size = 20)) + ylabel('N clusters / n genes') + xlabel('Dispersion')
res[[1]] + theme(text = element_text(size = 20)) + ylab('N clusters / n genes') + xlab('Dispersion')
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F, include_metabolic = T)
res[[1]] + theme(text = element_text(size = 20)) + ylab('N clusters / n genes') + xlab('Dispersion')
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F, include_metabolic = F, use_palette = 'Paired')
res[[1]] + theme(text = element_text(size = 20)) + ylab('N clusters / n genes') + xlab('Dispersion')
res[[2]]
res[[2]] %>% dplyr::select(pathway_name, median_disp, silh, n_clusters, n_genes, k_gene_raio)
res[[2]] %>% dplyr::select(pathway_name, median_disp, silh, n_clusters, n_genes, k_gene_ratio)
res[[2]] %>% dplyr::select(pathway_name, median_disp, silh, k, n_genes, k_gene_ratio)
res[[2]] %>% dplyr::select(pathway_name, median_disp, silh, k, n_genes, k_gene_ratio) %>% arrange(desc(median_disp))
dev.off()
getwd()
save.image(file = '../workspace_Nov6_2022.rda')
dispersion_stats
dispersion_stats  %>% head()
df_plot_labeled %>% head()
df_plot_labeled %>% dplyr::filter(median_disp >50 )
df_plot_labeled %>% dplyr::filter(median_disp >50 , k_gene_ratio > 5)
df_plot_labeled %>% dplyr::filter(median_disp >40 , k_gene_ratio > 5)
df_plot_labeled %>% dplyr::filter(median_disp >40 , k_gene_ratio > 5)
77/10
df_plot_labeled %>% arrange(n_genes)
dev.off()
res = plotly_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F)
res[[1]]
res = plot_dispersion_distribution(dispersion_stats , labels_idx = c(9,10,12,13,14,1,3), min_silh = 0.3, min_n_cluster = 2,  df_kvals = df_kvals , use_mean = F, include_metabolic = F, use_palette = 'Paired')
res[[1]] + theme(text = element_text(size = 20)) + ylab('N clusters / n genes') + xlab('Dispersion')
df_plot_labeled %>% dplyr::filter(median_disp >40 , k_gene_ratio > 5)
all_pathways %>% head()
all_pathways
data_real_plot
getwd()
save.image('Dec5_image_figure5.rda')
